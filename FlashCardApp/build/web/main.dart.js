// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const collection = dart_sdk.collection;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const card = flutter_sdk.src__material__card;
  const basic = flutter_sdk.src__widgets__basic;
  const container = flutter_sdk.src__widgets__container;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const text_style = flutter_sdk.src__painting__text_style;
  const text_painter = flutter_sdk.src__painting__text_painter;
  const dialog = flutter_sdk.src__material__dialog;
  const text$ = flutter_sdk.src__widgets__text;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const text_button = flutter_sdk.src__material__text_button;
  const navigator = flutter_sdk.src__widgets__navigator;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const drag_details = flutter_sdk.src__gestures__drag_details;
  const flex = flutter_sdk.src__rendering__flex;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const key = flutter_sdk.src__foundation__key;
  const text_span = flutter_sdk.src__painting__text_span;
  const strut_style = flutter_sdk.src__painting__strut_style;
  const layout_builder = flutter_sdk.src__widgets__layout_builder;
  const box = flutter_sdk.src__rendering__box;
  const media_query = flutter_sdk.src__widgets__media_query;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var auto_size_text = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $isEmpty = dartx.isEmpty;
  var $add = dartx.add;
  var $length = dartx.length;
  var $removeAt = dartx.removeAt;
  var $modulo = dartx['%'];
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $reversed = dartx.reversed;
  var $clamp = dartx.clamp;
  var $floor = dartx.floor;
  var $ceil = dartx.ceil;
  var $split = dartx.split;
  var $join = dartx.join;
  var $_set = dartx._set;
  var $values = dartx.values;
  var $keys = dartx.keys;
  var $remove = dartx.remove;
  var $containsKey = dartx.containsKey;
  var $cast = dartx.cast;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $where = dartx.where;
  var $removeWhere = dartx.removeWhere;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    JSArrayOfFlashcard: () => (T.JSArrayOfFlashcard = dart.constFn(_interceptors.JSArray$(main.Flashcard)))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToAlertDialog: () => (T.BuildContextToAlertDialog = dart.constFn(dart.fnType(dialog.AlertDialog, [framework.BuildContext])))(),
    FlashcardN: () => (T.FlashcardN = dart.constFn(dart.nullable(main.Flashcard)))(),
    DragEndDetailsTovoid: () => (T.DragEndDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragEndDetails])))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    FlashcardToMapOfString$dynamic: () => (T.FlashcardToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [main.Flashcard])))(),
    dynamicToFlashcard: () => (T.dynamicToFlashcard = dart.constFn(dart.fnType(main.Flashcard, [dart.dynamic])))(),
    ListOfFlashcard: () => (T.ListOfFlashcard = dart.constFn(core.List$(main.Flashcard)))(),
    BuildContextAndBoxConstraintsToWidget: () => (T.BuildContextAndBoxConstraintsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, box.BoxConstraints])))(),
    JSArrayOfObject: () => (T.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    LinkedMapOf_AutoSizeTextState$double: () => (T.LinkedMapOf_AutoSizeTextState$double = dart.constFn(_js_helper.LinkedMap$(auto_size_text._AutoSizeTextState, core.double)))(),
    CompleterOfSharedPreferences: () => (T.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    MapEntryOfString$Object: () => (T.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T.MapEntryOfString$Object(), [core.String, core.Object])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[5] || CT.C5
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[4] || CT.C4,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:auto_size_text/auto_size_text.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/auto_size_text-3.0.0/lib/src/auto_size_text.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Flash", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.blue, visualDensity: theme_data.VisualDensity.adaptivePlatformDensity}), home: new main.FlashcardPage.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  var question$ = dart.privateName(main, "Flashcard.question");
  var answer$ = dart.privateName(main, "Flashcard.answer");
  main.Flashcard = class Flashcard extends core.Object {
    get question() {
      return this[question$];
    }
    set question(value) {
      this[question$] = value;
    }
    get answer() {
      return this[answer$];
    }
    set answer(value) {
      this[answer$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let question = opts && 'question' in opts ? opts.question : null;
      let answer = opts && 'answer' in opts ? opts.answer : null;
      return new main.Flashcard.new({question: question, answer: answer});
    }
    toJson() {
      return new (T.IdentityMapOfString$dynamic()).from(["question", this.question, "answer", this.answer]);
    }
    static fromJson(json) {
      return new main.Flashcard.new({question: core.String.as(json[$_get]("question")), answer: core.String.as(json[$_get]("answer"))});
    }
  };
  (main.Flashcard.new = function(opts) {
    let question = opts && 'question' in opts ? opts.question : null;
    let answer = opts && 'answer' in opts ? opts.answer : null;
    this[question$] = question;
    this[answer$] = answer;
    ;
  }).prototype = main.Flashcard.prototype;
  dart.addTypeTests(main.Flashcard);
  dart.addTypeCaches(main.Flashcard);
  dart.setMethodSignature(main.Flashcard, () => ({
    __proto__: dart.getMethods(main.Flashcard.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(main.Flashcard, () => ['fromJson']);
  dart.setLibraryUri(main.Flashcard, I[0]);
  dart.setFieldSignature(main.Flashcard, () => ({
    __proto__: dart.getFields(main.Flashcard.__proto__),
    question: dart.fieldType(core.String),
    answer: dart.fieldType(core.String)
  }));
  var text$0 = dart.privateName(main, "FlashcardView.text");
  main.FlashcardView = class FlashcardView extends framework.StatelessWidget {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      return new main.FlashcardView.new({text: text});
    }
    build(context) {
      return new card.Card.new({elevation: 4, child: new basic.SizedBox.new({width: 800, height: 250, child: new container.Container.new({padding: new edge_insets.EdgeInsets.all(20), child: new basic.Center.new({child: new auto_size_text.AutoSizeText.new(this.text, {textAlign: ui.TextAlign.center, style: new text_style.TextStyle.new({fontSize: 50}), minFontSize: 10, maxLines: 10, overflow: text_painter.TextOverflow.ellipsis})})})})});
    }
  };
  (main.FlashcardView.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    this[text$0] = text;
    main.FlashcardView.__proto__.new.call(this);
    ;
  }).prototype = main.FlashcardView.prototype;
  dart.addTypeTests(main.FlashcardView);
  dart.addTypeCaches(main.FlashcardView);
  dart.setMethodSignature(main.FlashcardView, () => ({
    __proto__: dart.getMethods(main.FlashcardView.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.FlashcardView, I[0]);
  dart.setFieldSignature(main.FlashcardView, () => ({
    __proto__: dart.getFields(main.FlashcardView.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  main.FlashcardPage = class FlashcardPage extends framework.StatefulWidget {
    createState() {
      return new main._FlashcardPageState.new();
    }
    static ['_#new#tearOff']() {
      return new main.FlashcardPage.new();
    }
  };
  (main.FlashcardPage.new = function() {
    main.FlashcardPage.__proto__.new.call(this);
    ;
  }).prototype = main.FlashcardPage.prototype;
  dart.addTypeTests(main.FlashcardPage);
  dart.addTypeCaches(main.FlashcardPage);
  dart.setMethodSignature(main.FlashcardPage, () => ({
    __proto__: dart.getMethods(main.FlashcardPage.__proto__),
    createState: dart.fnType(main._FlashcardPageState, [])
  }));
  dart.setLibraryUri(main.FlashcardPage, I[0]);
  var _flashcards = dart.privateName(main, "_flashcards");
  var _currentIndex = dart.privateName(main, "_currentIndex");
  var _showAnswer = dart.privateName(main, "_showAnswer");
  var _loadData = dart.privateName(main, "_loadData");
  var _saveData = dart.privateName(main, "_saveData");
  var _createNewFlashcard = dart.privateName(main, "_createNewFlashcard");
  var _createAndAddFlashcard = dart.privateName(main, "_createAndAddFlashcard");
  var _deleteFlashcard = dart.privateName(main, "_deleteFlashcard");
  var _nextFlashcard = dart.privateName(main, "_nextFlashcard");
  var _handleSwipe = dart.privateName(main, "_handleSwipe");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  main._FlashcardPageState = class _FlashcardPageState extends framework.State$(main.FlashcardPage) {
    initState() {
      super.initState();
      this[_loadData]();
    }
    [_loadData]() {
      return async.async(dart.void, (function* _loadData() {
        this[_flashcards] = (yield main.LocalStorage.loadFlashcards());
        this[_currentIndex] = (yield main.LocalStorage.loadCurrentIndex());
        if (this[_flashcards][$isEmpty]) {
          this[_flashcards][$add](new main.Flashcard.new({question: "Tap to see the answer", answer: "Swipe to see the next card"}));
        }
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }).bind(this));
    }
    [_saveData]() {
      return async.async(dart.void, (function* _saveData() {
        yield main.LocalStorage.saveFlashcards(this[_flashcards]);
        yield main.LocalStorage.saveCurrentIndex(this[_currentIndex]);
      }).bind(this));
    }
    [_createAndAddFlashcard](context) {
      return async.async(dart.void, (function* _createAndAddFlashcard() {
        let result = (yield this[_createNewFlashcard](context));
        if (result != null) {
          this[_flashcards][$add](result);
          yield this[_saveData]();
          this.setState(dart.fn(() => {
          }, T.VoidTovoid()));
        }
      }).bind(this));
    }
    [_deleteFlashcard]() {
      if (this[_flashcards][$length] > 1) {
        this[_flashcards][$removeAt](this[_currentIndex]);
        this[_currentIndex] = this[_currentIndex][$modulo](this[_flashcards][$length]);
        this[_saveData]();
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
    }
    [_nextFlashcard]() {
      if (this[_flashcards][$length] > 1) {
        this[_currentIndex] = (this[_currentIndex] + 1)[$modulo](this[_flashcards][$length]);
        this[_showAnswer] = false;
        this[_saveData]();
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
    }
    [_createNewFlashcard](context) {
      return async.async(T.FlashcardN(), function* _createNewFlashcard() {
        let question = "";
        let answer = "";
        return dialog.showDialog(main.Flashcard, {context: context, barrierDismissible: false, builder: dart.fn(context => new dialog.AlertDialog.new({title: new text$.Text.new("Create New Flashcard"), content: new single_child_scroll_view.SingleChildScrollView.new({child: new basic.ListBody.new({children: T.JSArrayOfWidget().of([new text_field.TextField.new({onChanged: dart.fn(value => question = value, T.StringTovoid()), decoration: new input_decorator.InputDecoration.new({hintText: "Enter question"})}), new text_field.TextField.new({onChanged: dart.fn(value => answer = value, T.StringTovoid()), decoration: new input_decorator.InputDecoration.new({hintText: "Enter answer"})})])})}), actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({child: new text$.Text.new("Cancel"), onPressed: dart.fn(() => navigator.Navigator.of(context).pop(T.ObjectN()), T.VoidTovoid())}), new text_button.TextButton.new({child: new text$.Text.new("Add"), onPressed: dart.fn(() => {
                  if (question[$isNotEmpty] && answer[$isNotEmpty]) {
                    navigator.Navigator.of(context).pop(main.Flashcard, new main.Flashcard.new({question: question, answer: answer}));
                  }
                }, T.VoidTovoid())})])}), T.BuildContextToAlertDialog())});
      });
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text$.Text.new("Flutter Flashcards")}), body: new gesture_detector.GestureDetector.new({onHorizontalDragEnd: dart.fn(details => this[_handleSwipe](details), T.DragEndDetailsTovoid()), child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: (() => {
              let t0 = T.JSArrayOfWidget().of([]);
              if (this[_flashcards][$isNotEmpty]) t0.push(new basic.Padding.new({padding: C[1] || CT.C1, child: new text$.Text.new("Card " + dart.str(this[_currentIndex] + 1) + " of " + dart.str(this[_flashcards][$length]), {style: new text_style.TextStyle.new({fontSize: 18, fontWeight: ui.FontWeight.bold})})}));
              t0.push(new gesture_detector.GestureDetector.new({onTap: dart.fn(() => this.setState(dart.fn(() => this[_showAnswer] = !this[_showAnswer], T.VoidTovoid())), T.VoidTovoid()), child: new main.FlashcardView.new({text: this[_showAnswer] ? this[_flashcards][$_get](this[_currentIndex]).answer : this[_flashcards][$_get](this[_currentIndex]).question})}));
              t0.push(new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.spaceAround, children: T.JSArrayOfWidget().of([new floating_action_button.FloatingActionButton.new({onPressed: dart.bind(this, _deleteFlashcard), tooltip: "Delete Flashcard", child: new icon.Icon.new(icons.Icons.delete), backgroundColor: colors.Colors.red}), new floating_action_button.FloatingActionButton.new({onPressed: dart.fn(() => this[_createAndAddFlashcard](context), T.VoidTovoid()), tooltip: "Add Flashcard", child: new icon.Icon.new(icons.Icons.add)})])}));
              return t0;
            })()})})});
    }
    [_handleSwipe](details) {
      if (this[_flashcards][$length] > 1) {
        if (dart.nullCheck(details.primaryVelocity) < -250 && this[_currentIndex] < this[_flashcards][$length] - 1) {
          this[_nextFlashcard]();
        } else if (dart.nullCheck(details.primaryVelocity) > 250 && this[_currentIndex] > 0) {
          this.setState(dart.fn(() => {
            this[_currentIndex] = this[_currentIndex] - 1;
            this[_showAnswer] = false;
            this[_saveData]();
          }, T.VoidTovoid()));
        }
      }
    }
    static ['_#new#tearOff']() {
      return new main._FlashcardPageState.new();
    }
  };
  (main._FlashcardPageState.new = function() {
    this[_flashcards] = T.JSArrayOfFlashcard().of([]);
    this[_currentIndex] = 0;
    this[_showAnswer] = false;
    main._FlashcardPageState.__proto__.new.call(this);
    ;
  }).prototype = main._FlashcardPageState.prototype;
  dart.addTypeTests(main._FlashcardPageState);
  dart.addTypeCaches(main._FlashcardPageState);
  dart.setMethodSignature(main._FlashcardPageState, () => ({
    __proto__: dart.getMethods(main._FlashcardPageState.__proto__),
    [_loadData]: dart.fnType(async.Future$(dart.void), []),
    [_saveData]: dart.fnType(async.Future$(dart.void), []),
    [_createAndAddFlashcard]: dart.fnType(async.Future$(dart.void), [framework.BuildContext]),
    [_deleteFlashcard]: dart.fnType(dart.void, []),
    [_nextFlashcard]: dart.fnType(dart.void, []),
    [_createNewFlashcard]: dart.fnType(async.Future$(dart.nullable(main.Flashcard)), [framework.BuildContext]),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_handleSwipe]: dart.fnType(dart.void, [drag_details.DragEndDetails])
  }));
  dart.setLibraryUri(main._FlashcardPageState, I[0]);
  dart.setFieldSignature(main._FlashcardPageState, () => ({
    __proto__: dart.getFields(main._FlashcardPageState.__proto__),
    [_flashcards]: dart.fieldType(core.List$(main.Flashcard)),
    [_currentIndex]: dart.fieldType(core.int),
    [_showAnswer]: dart.fieldType(core.bool)
  }));
  main.LocalStorage = class LocalStorage extends core.Object {
    static init() {
      return async.async(dart.dynamic, function* init() {
        main.LocalStorage._preferences = (yield shared_preferences.SharedPreferences.getInstance());
      });
    }
    static saveFlashcards(flashcards) {
      return async.async(dart.dynamic, function* saveFlashcards() {
        let t1;
        let flashcardsJson = convert.jsonEncode(flashcards[$map](T.MapOfString$dynamic(), dart.fn(f => f.toJson(), T.FlashcardToMapOfString$dynamic()))[$toList]());
        yield (t1 = main.LocalStorage._preferences, t1 == null ? null : t1.setString("flashcards", flashcardsJson));
      });
    }
    static loadFlashcards() {
      return async.async(T.ListOfFlashcard(), function* loadFlashcards() {
        let t1;
        let flashcardsJson = (t1 = main.LocalStorage._preferences, t1 == null ? null : t1.getString("flashcards"));
        if (flashcardsJson == null) return T.JSArrayOfFlashcard().of([]);
        let decoded = core.Iterable.as(convert.jsonDecode(flashcardsJson));
        return decoded[$map](main.Flashcard, dart.fn(json => main.Flashcard.fromJson(T.MapOfString$dynamic().as(json)), T.dynamicToFlashcard()))[$toList]();
      });
    }
    static saveCurrentIndex(index) {
      return async.async(dart.dynamic, function* saveCurrentIndex() {
        let t1;
        yield (t1 = main.LocalStorage._preferences, t1 == null ? null : t1.setInt("currentIndex", index));
      });
    }
    static loadCurrentIndex() {
      return async.async(core.int, function* loadCurrentIndex() {
        let t1, t1$;
        t1$ = (t1 = main.LocalStorage._preferences, t1 == null ? null : t1.getInt("currentIndex"));
        return t1$ == null ? 0 : t1$;
      });
    }
    static ['_#new#tearOff']() {
      return new main.LocalStorage.new();
    }
  };
  (main.LocalStorage.new = function() {
    ;
  }).prototype = main.LocalStorage.prototype;
  dart.addTypeTests(main.LocalStorage);
  dart.addTypeCaches(main.LocalStorage);
  dart.setStaticMethodSignature(main.LocalStorage, () => ['init', 'saveFlashcards', 'loadFlashcards', 'saveCurrentIndex', 'loadCurrentIndex']);
  dart.setLibraryUri(main.LocalStorage, I[0]);
  dart.setStaticFieldSignature(main.LocalStorage, () => ['_preferences', '_FlashcardsKey', '_CurrentIndexKey']);
  dart.defineLazy(main.LocalStorage, {
    /*main.LocalStorage._preferences*/get _preferences() {
      return null;
    },
    set _preferences(value) {},
    /*main.LocalStorage._FlashcardsKey*/get _FlashcardsKey() {
      return "flashcards";
    },
    /*main.LocalStorage._CurrentIndexKey*/get _CurrentIndexKey() {
      return "currentIndex";
    }
  }, false);
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      yield main.LocalStorage.init();
      binding.runApp(new main.MyApp.new());
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t1;
    let registrar = (t1 = pluginRegistrar, t1 == null ? plugin_registry.webPluginRegistrar : t1);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  var textKey$ = dart.privateName(auto_size_text, "AutoSizeText.textKey");
  var data$ = dart.privateName(auto_size_text, "AutoSizeText.data");
  var textSpan$ = dart.privateName(auto_size_text, "AutoSizeText.textSpan");
  var style$ = dart.privateName(auto_size_text, "AutoSizeText.style");
  var strutStyle$ = dart.privateName(auto_size_text, "AutoSizeText.strutStyle");
  var minFontSize$ = dart.privateName(auto_size_text, "AutoSizeText.minFontSize");
  var maxFontSize$ = dart.privateName(auto_size_text, "AutoSizeText.maxFontSize");
  var stepGranularity$ = dart.privateName(auto_size_text, "AutoSizeText.stepGranularity");
  var presetFontSizes$ = dart.privateName(auto_size_text, "AutoSizeText.presetFontSizes");
  var group$ = dart.privateName(auto_size_text, "AutoSizeText.group");
  var textAlign$ = dart.privateName(auto_size_text, "AutoSizeText.textAlign");
  var textDirection$ = dart.privateName(auto_size_text, "AutoSizeText.textDirection");
  var locale$ = dart.privateName(auto_size_text, "AutoSizeText.locale");
  var softWrap$ = dart.privateName(auto_size_text, "AutoSizeText.softWrap");
  var wrapWords$ = dart.privateName(auto_size_text, "AutoSizeText.wrapWords");
  var overflow$ = dart.privateName(auto_size_text, "AutoSizeText.overflow");
  var overflowReplacement$ = dart.privateName(auto_size_text, "AutoSizeText.overflowReplacement");
  var textScaleFactor$ = dart.privateName(auto_size_text, "AutoSizeText.textScaleFactor");
  var maxLines$ = dart.privateName(auto_size_text, "AutoSizeText.maxLines");
  var semanticsLabel$ = dart.privateName(auto_size_text, "AutoSizeText.semanticsLabel");
  auto_size_text.AutoSizeText = class AutoSizeText extends framework.StatefulWidget {
    get textKey() {
      return this[textKey$];
    }
    set textKey(value) {
      super.textKey = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get textSpan() {
      return this[textSpan$];
    }
    set textSpan(value) {
      super.textSpan = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get strutStyle() {
      return this[strutStyle$];
    }
    set strutStyle(value) {
      super.strutStyle = value;
    }
    get minFontSize() {
      return this[minFontSize$];
    }
    set minFontSize(value) {
      super.minFontSize = value;
    }
    get maxFontSize() {
      return this[maxFontSize$];
    }
    set maxFontSize(value) {
      super.maxFontSize = value;
    }
    get stepGranularity() {
      return this[stepGranularity$];
    }
    set stepGranularity(value) {
      super.stepGranularity = value;
    }
    get presetFontSizes() {
      return this[presetFontSizes$];
    }
    set presetFontSizes(value) {
      super.presetFontSizes = value;
    }
    get group() {
      return this[group$];
    }
    set group(value) {
      super.group = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get softWrap() {
      return this[softWrap$];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get wrapWords() {
      return this[wrapWords$];
    }
    set wrapWords(value) {
      super.wrapWords = value;
    }
    get overflow() {
      return this[overflow$];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get overflowReplacement() {
      return this[overflowReplacement$];
    }
    set overflowReplacement(value) {
      super.overflowReplacement = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get semanticsLabel() {
      return this[semanticsLabel$];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    static ['_#new#tearOff'](data, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let textKey = opts && 'textKey' in opts ? opts.textKey : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let minFontSize = opts && 'minFontSize' in opts ? opts.minFontSize : 12;
      let maxFontSize = opts && 'maxFontSize' in opts ? opts.maxFontSize : 1 / 0;
      let stepGranularity = opts && 'stepGranularity' in opts ? opts.stepGranularity : 1;
      let presetFontSizes = opts && 'presetFontSizes' in opts ? opts.presetFontSizes : null;
      let group = opts && 'group' in opts ? opts.group : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let wrapWords = opts && 'wrapWords' in opts ? opts.wrapWords : true;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let overflowReplacement = opts && 'overflowReplacement' in opts ? opts.overflowReplacement : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      return new auto_size_text.AutoSizeText.new(data, {key: key, textKey: textKey, style: style, strutStyle: strutStyle, minFontSize: minFontSize, maxFontSize: maxFontSize, stepGranularity: stepGranularity, presetFontSizes: presetFontSizes, group: group, textAlign: textAlign, textDirection: textDirection, locale: locale, softWrap: softWrap, wrapWords: wrapWords, overflow: overflow, overflowReplacement: overflowReplacement, textScaleFactor: textScaleFactor, maxLines: maxLines, semanticsLabel: semanticsLabel});
    }
    static ['_#rich#tearOff'](textSpan, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let textKey = opts && 'textKey' in opts ? opts.textKey : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let minFontSize = opts && 'minFontSize' in opts ? opts.minFontSize : 12;
      let maxFontSize = opts && 'maxFontSize' in opts ? opts.maxFontSize : 1 / 0;
      let stepGranularity = opts && 'stepGranularity' in opts ? opts.stepGranularity : 1;
      let presetFontSizes = opts && 'presetFontSizes' in opts ? opts.presetFontSizes : null;
      let group = opts && 'group' in opts ? opts.group : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let wrapWords = opts && 'wrapWords' in opts ? opts.wrapWords : true;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let overflowReplacement = opts && 'overflowReplacement' in opts ? opts.overflowReplacement : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
      return new auto_size_text.AutoSizeText.rich(textSpan, {key: key, textKey: textKey, style: style, strutStyle: strutStyle, minFontSize: minFontSize, maxFontSize: maxFontSize, stepGranularity: stepGranularity, presetFontSizes: presetFontSizes, group: group, textAlign: textAlign, textDirection: textDirection, locale: locale, softWrap: softWrap, wrapWords: wrapWords, overflow: overflow, overflowReplacement: overflowReplacement, textScaleFactor: textScaleFactor, maxLines: maxLines, semanticsLabel: semanticsLabel});
    }
    createState() {
      return new auto_size_text._AutoSizeTextState.new();
    }
  };
  (auto_size_text.AutoSizeText.new = function(data, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let textKey = opts && 'textKey' in opts ? opts.textKey : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let minFontSize = opts && 'minFontSize' in opts ? opts.minFontSize : 12;
    let maxFontSize = opts && 'maxFontSize' in opts ? opts.maxFontSize : 1 / 0;
    let stepGranularity = opts && 'stepGranularity' in opts ? opts.stepGranularity : 1;
    let presetFontSizes = opts && 'presetFontSizes' in opts ? opts.presetFontSizes : null;
    let group = opts && 'group' in opts ? opts.group : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let wrapWords = opts && 'wrapWords' in opts ? opts.wrapWords : true;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let overflowReplacement = opts && 'overflowReplacement' in opts ? opts.overflowReplacement : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    this[data$] = data;
    this[textKey$] = textKey;
    this[style$] = style;
    this[strutStyle$] = strutStyle;
    this[minFontSize$] = minFontSize;
    this[maxFontSize$] = maxFontSize;
    this[stepGranularity$] = stepGranularity;
    this[presetFontSizes$] = presetFontSizes;
    this[group$] = group;
    this[textAlign$] = textAlign;
    this[textDirection$] = textDirection;
    this[locale$] = locale;
    this[softWrap$] = softWrap;
    this[wrapWords$] = wrapWords;
    this[overflow$] = overflow;
    this[overflowReplacement$] = overflowReplacement;
    this[textScaleFactor$] = textScaleFactor;
    this[maxLines$] = maxLines;
    this[semanticsLabel$] = semanticsLabel;
    this[textSpan$] = null;
    auto_size_text.AutoSizeText.__proto__.new.call(this, {key: key});
    ;
  }).prototype = auto_size_text.AutoSizeText.prototype;
  (auto_size_text.AutoSizeText.rich = function(textSpan, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let textKey = opts && 'textKey' in opts ? opts.textKey : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let minFontSize = opts && 'minFontSize' in opts ? opts.minFontSize : 12;
    let maxFontSize = opts && 'maxFontSize' in opts ? opts.maxFontSize : 1 / 0;
    let stepGranularity = opts && 'stepGranularity' in opts ? opts.stepGranularity : 1;
    let presetFontSizes = opts && 'presetFontSizes' in opts ? opts.presetFontSizes : null;
    let group = opts && 'group' in opts ? opts.group : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let wrapWords = opts && 'wrapWords' in opts ? opts.wrapWords : true;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let overflowReplacement = opts && 'overflowReplacement' in opts ? opts.overflowReplacement : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    this[textSpan$] = textSpan;
    this[textKey$] = textKey;
    this[style$] = style;
    this[strutStyle$] = strutStyle;
    this[minFontSize$] = minFontSize;
    this[maxFontSize$] = maxFontSize;
    this[stepGranularity$] = stepGranularity;
    this[presetFontSizes$] = presetFontSizes;
    this[group$] = group;
    this[textAlign$] = textAlign;
    this[textDirection$] = textDirection;
    this[locale$] = locale;
    this[softWrap$] = softWrap;
    this[wrapWords$] = wrapWords;
    this[overflow$] = overflow;
    this[overflowReplacement$] = overflowReplacement;
    this[textScaleFactor$] = textScaleFactor;
    this[maxLines$] = maxLines;
    this[semanticsLabel$] = semanticsLabel;
    this[data$] = null;
    auto_size_text.AutoSizeText.__proto__.new.call(this, {key: key});
    ;
  }).prototype = auto_size_text.AutoSizeText.prototype;
  dart.addTypeTests(auto_size_text.AutoSizeText);
  dart.addTypeCaches(auto_size_text.AutoSizeText);
  dart.setMethodSignature(auto_size_text.AutoSizeText, () => ({
    __proto__: dart.getMethods(auto_size_text.AutoSizeText.__proto__),
    createState: dart.fnType(auto_size_text._AutoSizeTextState, [])
  }));
  dart.setLibraryUri(auto_size_text.AutoSizeText, I[1]);
  dart.setFieldSignature(auto_size_text.AutoSizeText, () => ({
    __proto__: dart.getFields(auto_size_text.AutoSizeText.__proto__),
    textKey: dart.finalFieldType(dart.nullable(key.Key)),
    data: dart.finalFieldType(dart.nullable(core.String)),
    textSpan: dart.finalFieldType(dart.nullable(text_span.TextSpan)),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    strutStyle: dart.finalFieldType(dart.nullable(strut_style.StrutStyle)),
    minFontSize: dart.finalFieldType(core.double),
    maxFontSize: dart.finalFieldType(core.double),
    stepGranularity: dart.finalFieldType(core.double),
    presetFontSizes: dart.finalFieldType(dart.nullable(core.List$(core.double))),
    group: dart.finalFieldType(dart.nullable(auto_size_text.AutoSizeGroup)),
    textAlign: dart.finalFieldType(dart.nullable(ui.TextAlign)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    softWrap: dart.finalFieldType(dart.nullable(core.bool)),
    wrapWords: dart.finalFieldType(core.bool),
    overflow: dart.finalFieldType(dart.nullable(text_painter.TextOverflow)),
    overflowReplacement: dart.finalFieldType(dart.nullable(framework.Widget)),
    textScaleFactor: dart.finalFieldType(dart.nullable(core.double)),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.setStaticFieldSignature(auto_size_text.AutoSizeText, () => ['_defaultFontSize']);
  dart.defineLazy(auto_size_text.AutoSizeText, {
    /*auto_size_text.AutoSizeText._defaultFontSize*/get _defaultFontSize() {
      return 14;
    }
  }, false);
  var _register = dart.privateName(auto_size_text, "_register");
  var _remove = dart.privateName(auto_size_text, "_remove");
  var _validateProperties = dart.privateName(auto_size_text, "_validateProperties");
  var _calculateFontSize = dart.privateName(auto_size_text, "_calculateFontSize");
  var _updateFontSize = dart.privateName(auto_size_text, "_updateFontSize");
  var _fontSize = dart.privateName(auto_size_text, "_fontSize");
  var _buildText = dart.privateName(auto_size_text, "_buildText");
  var _checkTextFits = dart.privateName(auto_size_text, "_checkTextFits");
  var _notifySync = dart.privateName(auto_size_text, "_notifySync");
  auto_size_text._AutoSizeTextState = class _AutoSizeTextState extends framework.State$(auto_size_text.AutoSizeText) {
    initState() {
      let t1;
      super.initState();
      t1 = this.widget.group;
      t1 == null ? null : t1[_register](this);
    }
    didUpdateWidget(oldWidget) {
      let t1, t1$;
      auto_size_text.AutoSizeText.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(oldWidget.group, this.widget.group)) {
        t1 = oldWidget.group;
        t1 == null ? null : t1[_remove](this);
        t1$ = this.widget.group;
        t1$ == null ? null : t1$[_register](this);
      }
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, size) => {
          let t1;
          let defaultTextStyle = text$.DefaultTextStyle.of(context);
          let style = this.widget.style;
          if (this.widget.style == null || dart.nullCheck(this.widget.style).inherit) {
            style = defaultTextStyle.style.merge(this.widget.style);
          }
          if (dart.nullCheck(style).fontSize == null) {
            style = style.copyWith({fontSize: 14});
          }
          let maxLines = (t1 = this.widget.maxLines, t1 == null ? defaultTextStyle.maxLines : t1);
          this[_validateProperties](style, maxLines);
          let result = this[_calculateFontSize](size, style, maxLines);
          let fontSize = core.double.as(result[$_get](0));
          let textFits = core.bool.as(result[$_get](1));
          let text = null;
          if (this.widget.group != null) {
            dart.nullCheck(this.widget.group)[_updateFontSize](this, fontSize);
            text = this[_buildText](dart.nullCheck(this.widget.group)[_fontSize], style, maxLines);
          } else {
            text = this[_buildText](fontSize, style, maxLines);
          }
          if (this.widget.overflowReplacement != null && !textFits) {
            return dart.nullCheck(this.widget.overflowReplacement);
          } else {
            return text;
          }
        }, T.BuildContextAndBoxConstraintsToWidget())});
    }
    [_validateProperties](style, maxLines) {
      if (!(this.widget.overflow == null || this.widget.overflowReplacement == null)) dart.assertFailed("Either overflow or overflowReplacement must be null.", I[2], 279, 12, "widget.overflow == null || widget.overflowReplacement == null");
      if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed("MaxLines must be greater than or equal to 1.", I[2], 281, 12, "maxLines == null || maxLines > 0");
      if (!(this.widget.key == null || !dart.equals(this.widget.key, this.widget.textKey))) dart.assertFailed("Key and textKey must not be equal.", I[2], 283, 12, "widget.key == null || widget.key != widget.textKey");
      if (this.widget.presetFontSizes == null) {
        if (!(this.widget.stepGranularity >= 0.1)) dart.assertFailed("StepGranularity must be greater than or equal to 0.1. It is not a " + "good idea to resize the font with a higher accuracy.", I[2], 288, 11, "widget.stepGranularity >= 0.1");
        if (!(this.widget.minFontSize >= 0)) dart.assertFailed("MinFontSize must be greater than or equal to 0.", I[2], 291, 14, "widget.minFontSize >= 0");
        if (!(this.widget.maxFontSize > 0)) dart.assertFailed("MaxFontSize has to be greater than 0.", I[2], 293, 14, "widget.maxFontSize > 0");
        if (!(this.widget.minFontSize <= this.widget.maxFontSize)) dart.assertFailed("MinFontSize must be smaller or equal than maxFontSize.", I[2], 294, 14, "widget.minFontSize <= widget.maxFontSize");
        if (!((this.widget.minFontSize / this.widget.stepGranularity)[$modulo](1) === 0)) dart.assertFailed("MinFontSize must be a multiple of stepGranularity.", I[2], 296, 14, "widget.minFontSize / widget.stepGranularity % 1 == 0");
        if (this.widget.maxFontSize !== 1 / 0) {
          if (!((this.widget.maxFontSize / this.widget.stepGranularity)[$modulo](1) === 0)) dart.assertFailed("MaxFontSize must be a multiple of stepGranularity.", I[2], 299, 16, "widget.maxFontSize / widget.stepGranularity % 1 == 0");
        }
      } else {
        if (!dart.nullCheck(this.widget.presetFontSizes)[$isNotEmpty]) dart.assertFailed("PresetFontSizes must not be empty.", I[2], 303, 14, "widget.presetFontSizes!.isNotEmpty");
      }
    }
    [_calculateFontSize](size, style, maxLines) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5;
      let span = new text_span.TextSpan.new({style: (t1$ = (t1 = this.widget.textSpan, t1 == null ? null : t1.style), t1$ == null ? style : t1$), text: (t1$1 = (t1$0 = this.widget.textSpan, t1$0 == null ? null : t1$0.text), t1$1 == null ? this.widget.data : t1$1), children: (t1$2 = this.widget.textSpan, t1$2 == null ? null : t1$2.children), recognizer: (t1$3 = this.widget.textSpan, t1$3 == null ? null : t1$3.recognizer)});
      let userScale = (t1$4 = this.widget.textScaleFactor, t1$4 == null ? media_query.MediaQuery.textScaleFactorOf(this.context) : t1$4);
      let left = null;
      let right = null;
      let presetFontSizes = (t1$5 = this.widget.presetFontSizes, t1$5 == null ? null : t1$5[$reversed][$toList]());
      if (presetFontSizes == null) {
        let defaultFontSize = dart.nullCheck(dart.nullCheck(style).fontSize)[$clamp](this.widget.minFontSize, this.widget.maxFontSize);
        let defaultScale = defaultFontSize * userScale / dart.nullCheck(style.fontSize);
        if (this[_checkTextFits](span, defaultScale, maxLines, size)) {
          return T.JSArrayOfObject().of([defaultFontSize * userScale, true]);
        }
        left = (this.widget.minFontSize / this.widget.stepGranularity)[$floor]();
        right = (defaultFontSize / this.widget.stepGranularity)[$ceil]();
      } else {
        left = 0;
        right = presetFontSizes[$length] - 1;
      }
      let lastValueFits = false;
      while (left <= right) {
        let mid = (left + (right - left) / 2)[$floor]();
        let scale = null;
        if (presetFontSizes == null) {
          scale = mid * userScale * this.widget.stepGranularity / dart.nullCheck(dart.nullCheck(style).fontSize);
        } else {
          scale = presetFontSizes[$_get](mid) * userScale / dart.nullCheck(dart.nullCheck(style).fontSize);
        }
        if (this[_checkTextFits](span, scale, maxLines, size)) {
          left = mid + 1;
          lastValueFits = true;
        } else {
          right = mid - 1;
        }
      }
      if (!lastValueFits) {
        right = right + 1;
      }
      let fontSize = null;
      if (presetFontSizes == null) {
        fontSize = right * userScale * this.widget.stepGranularity;
      } else {
        fontSize = presetFontSizes[$_get](right) * userScale;
      }
      return T.JSArrayOfObject().of([fontSize, lastValueFits]);
    }
    [_checkTextFits](text, scale, maxLines, constraints) {
      let t1, t1$, t1$0, t1$1;
      if (!this.widget.wrapWords) {
        let words = text.toPlainText()[$split](core.RegExp.new("\\s+"));
        let wordWrapTextPainter = new text_painter.TextPainter.new({text: new text_span.TextSpan.new({style: text.style, text: words[$join]("\n")}), textAlign: (t1 = this.widget.textAlign, t1 == null ? ui.TextAlign.left : t1), textDirection: (t1$ = this.widget.textDirection, t1$ == null ? ui.TextDirection.ltr : t1$), textScaleFactor: scale, maxLines: words[$length], locale: this.widget.locale, strutStyle: this.widget.strutStyle});
        wordWrapTextPainter.layout({maxWidth: constraints.maxWidth});
        if (wordWrapTextPainter.didExceedMaxLines || wordWrapTextPainter.width > constraints.maxWidth) {
          return false;
        }
      }
      let textPainter = new text_painter.TextPainter.new({text: text, textAlign: (t1$0 = this.widget.textAlign, t1$0 == null ? ui.TextAlign.left : t1$0), textDirection: (t1$1 = this.widget.textDirection, t1$1 == null ? ui.TextDirection.ltr : t1$1), textScaleFactor: scale, maxLines: maxLines, locale: this.widget.locale, strutStyle: this.widget.strutStyle});
      textPainter.layout({maxWidth: constraints.maxWidth});
      return !(textPainter.didExceedMaxLines || textPainter.height > constraints.maxHeight || textPainter.width > constraints.maxWidth);
    }
    [_buildText](fontSize, style, maxLines) {
      if (this.widget.data != null) {
        return new text$.Text.new(dart.nullCheck(this.widget.data), {key: this.widget.textKey, style: style.copyWith({fontSize: fontSize}), strutStyle: this.widget.strutStyle, textAlign: this.widget.textAlign, textDirection: this.widget.textDirection, locale: this.widget.locale, softWrap: this.widget.softWrap, overflow: this.widget.overflow, textScaleFactor: 1, maxLines: maxLines, semanticsLabel: this.widget.semanticsLabel});
      } else {
        return new text$.Text.rich(dart.nullCheck(this.widget.textSpan), {key: this.widget.textKey, style: style, strutStyle: this.widget.strutStyle, textAlign: this.widget.textAlign, textDirection: this.widget.textDirection, locale: this.widget.locale, softWrap: this.widget.softWrap, overflow: this.widget.overflow, textScaleFactor: fontSize / dart.nullCheck(style.fontSize), maxLines: maxLines, semanticsLabel: this.widget.semanticsLabel});
      }
    }
    [_notifySync]() {
      this.setState(dart.fn(() => {
      }, T.VoidTovoid()));
    }
    dispose() {
      if (this.widget.group != null) {
        dart.nullCheck(this.widget.group)[_remove](this);
      }
      super.dispose();
    }
    static ['_#new#tearOff']() {
      return new auto_size_text._AutoSizeTextState.new();
    }
  };
  (auto_size_text._AutoSizeTextState.new = function() {
    auto_size_text._AutoSizeTextState.__proto__.new.call(this);
    ;
  }).prototype = auto_size_text._AutoSizeTextState.prototype;
  dart.addTypeTests(auto_size_text._AutoSizeTextState);
  dart.addTypeCaches(auto_size_text._AutoSizeTextState);
  dart.setMethodSignature(auto_size_text._AutoSizeTextState, () => ({
    __proto__: dart.getMethods(auto_size_text._AutoSizeTextState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_validateProperties]: dart.fnType(dart.void, [text_style.TextStyle, dart.nullable(core.int)]),
    [_calculateFontSize]: dart.fnType(core.List, [box.BoxConstraints, dart.nullable(text_style.TextStyle), dart.nullable(core.int)]),
    [_checkTextFits]: dart.fnType(core.bool, [text_span.TextSpan, core.double, dart.nullable(core.int), box.BoxConstraints]),
    [_buildText]: dart.fnType(framework.Widget, [core.double, text_style.TextStyle, dart.nullable(core.int)]),
    [_notifySync]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(auto_size_text._AutoSizeTextState, I[1]);
  var _listeners = dart.privateName(auto_size_text, "_listeners");
  var _widgetsNotified = dart.privateName(auto_size_text, "_widgetsNotified");
  var _notifyListeners = dart.privateName(auto_size_text, "_notifyListeners");
  auto_size_text.AutoSizeGroup = class AutoSizeGroup extends core.Object {
    [_register](text) {
      this[_listeners][$_set](text, 1 / 0);
    }
    [_updateFontSize](text, maxFontSize) {
      let oldFontSize = this[_fontSize];
      if (maxFontSize <= this[_fontSize]) {
        this[_fontSize] = maxFontSize;
        this[_listeners][$_set](text, maxFontSize);
      } else if (this[_listeners][$_get](text) === this[_fontSize]) {
        this[_listeners][$_set](text, maxFontSize);
        this[_fontSize] = 1 / 0;
        for (let size of this[_listeners][$values]) {
          if (size < this[_fontSize]) this[_fontSize] = size;
        }
      } else {
        this[_listeners][$_set](text, maxFontSize);
      }
      if (oldFontSize !== this[_fontSize]) {
        this[_widgetsNotified] = false;
        async.scheduleMicrotask(dart.bind(this, _notifyListeners));
      }
    }
    [_notifyListeners]() {
      if (this[_widgetsNotified]) {
        return;
      } else {
        this[_widgetsNotified] = true;
      }
      for (let textState of this[_listeners][$keys]) {
        if (textState.mounted) {
          textState[_notifySync]();
        }
      }
    }
    [_remove](text) {
      this[_updateFontSize](text, 1 / 0);
      this[_listeners][$remove](text);
    }
    static ['_#new#tearOff']() {
      return new auto_size_text.AutoSizeGroup.new();
    }
  };
  (auto_size_text.AutoSizeGroup.new = function() {
    this[_listeners] = new (T.LinkedMapOf_AutoSizeTextState$double()).new();
    this[_widgetsNotified] = false;
    this[_fontSize] = 1 / 0;
    ;
  }).prototype = auto_size_text.AutoSizeGroup.prototype;
  dart.addTypeTests(auto_size_text.AutoSizeGroup);
  dart.addTypeCaches(auto_size_text.AutoSizeGroup);
  dart.setMethodSignature(auto_size_text.AutoSizeGroup, () => ({
    __proto__: dart.getMethods(auto_size_text.AutoSizeGroup.__proto__),
    [_register]: dart.fnType(dart.void, [auto_size_text._AutoSizeTextState]),
    [_updateFontSize]: dart.fnType(dart.void, [auto_size_text._AutoSizeTextState, core.double]),
    [_notifyListeners]: dart.fnType(dart.void, []),
    [_remove]: dart.fnType(dart.void, [auto_size_text._AutoSizeTextState])
  }));
  dart.setLibraryUri(auto_size_text.AutoSizeGroup, I[1]);
  dart.setFieldSignature(auto_size_text.AutoSizeGroup, () => ({
    __proto__: dart.getFields(auto_size_text.AutoSizeGroup.__proto__),
    [_listeners]: dart.finalFieldType(core.Map$(auto_size_text._AutoSizeTextState, core.double)),
    [_widgetsNotified]: dart.fieldType(core.bool),
    [_fontSize]: dart.fieldType(core.double)
  }));
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t2;
      let list = T.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T.ListNOfString().as((t2 = list, t2 == null ? null : t2[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[3], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T.MapEntryOfString$Object()).__(newKey, value);
      }, T.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[4]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[5], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[2] || CT.C2)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[6]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[7]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t4, t4$;
        return key[$startsWith](prefix) && dart.test((t4$ = (t4 = allowList, t4 == null ? null : t4.contains(key)), t4$ == null ? true : t4$));
      }, T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[8]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        } else {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T.LinkedHashMapOfString$Object().from(this[_data]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[7]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[9]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[9]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[9]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[6]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t4;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t4 = filter.allowList, t4 == null ? null : t4[$toList]())])));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let t4;
        t4 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t4 == null ? new (T.IdentityMapOfString$Object()).new() : t4;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), function* getAllWithParameters() {
        let t4, t4$;
        let filter = parameters.filter;
        let allowListAsList = (t4 = filter.allowList, t4 == null ? null : t4[$toList]());
        t4$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t4$ == null ? new (T.IdentityMapOfString$Object()).new() : t4$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[10]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[3] || CT.C3;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:auto_size_text/auto_size_text.dart": auto_size_text,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences
  }, {
    "package:auto_size_text/auto_size_text.dart": ["src/auto_size_text.dart", "src/auto_size_group.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/auto_size_text-3.0.0/lib/src/auto_size_text.dart","/zapp/pub/.pub_cache/hosted/pub.dev/auto_size_text-3.0.0/lib/src/auto_size_group.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    auto_size_text: auto_size_text,
    shared_preferences: shared_preferences,
    shared_preferences_web: shared_preferences_web,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
