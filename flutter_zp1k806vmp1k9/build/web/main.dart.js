// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const html = dart_sdk.html;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const bottom_navigation_bar = flutter_sdk.src__material__bottom_navigation_bar;
  const bottom_navigation_bar_item = flutter_sdk.src__widgets__bottom_navigation_bar_item;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const binding = flutter_sdk.src__widgets__binding;
  const plugin_registry = flutter_sdk.src__plugin_registry;
  const basic = flutter_sdk.src__widgets__basic;
  const dropdown = flutter_sdk.src__material__dropdown;
  const editable_text = flutter_sdk.src__widgets__editable_text;
  const snack_bar = flutter_sdk.src__material__snack_bar;
  const dialog = flutter_sdk.src__material__dialog;
  const text_field = flutter_sdk.src__material__text_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const text_button = flutter_sdk.src__material__text_button;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const input_border = flutter_sdk.src__material__input_border;
  const container = flutter_sdk.src__widgets__container;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const box_border = flutter_sdk.src__painting__box_border;
  const icons = flutter_sdk.src__material__icons;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const text_style = flutter_sdk.src__painting__text_style;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const scroll_physics = flutter_sdk.src__widgets__scroll_physics;
  const sliver_grid = flutter_sdk.src__rendering__sliver_grid;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const tween = flutter_sdk.src__animation__tween;
  const drag_details = flutter_sdk.src__gestures__drag_details;
  const transitions = flutter_sdk.src__widgets__transitions;
  const vector_math_64 = flutter_sdk.vector_math_64;
  const alignment = flutter_sdk.src__painting__alignment;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const animation = flutter_sdk.src__animation__animation;
  const list_tile = flutter_sdk.src__material__list_tile;
  const icon_button = flutter_sdk.src__material__icon_button;
  const card = flutter_sdk.src__material__card;
  const platform_channel = flutter_sdk.src__services__platform_channel;
  const message_codecs = flutter_sdk.src__services__message_codecs;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var practice_screen = Object.create(dart.library);
  var new_flashcard_screen = Object.create(dart.library);
  var flashcard_model = Object.create(dart.library);
  var shared_preferences = Object.create(dart.library);
  var shared_preferences_web = Object.create(dart.library);
  var flashcard_viewer = Object.create(dart.library);
  var flashcard_preview_screen = Object.create(dart.library);
  var shared_preferences_platform_interface = Object.create(dart.library);
  var types = Object.create(dart.library);
  var flashcard_view = Object.create(dart.library);
  var plugin_platform_interface = Object.create(dart.library);
  var method_channel_shared_preferences = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toSet = dartx.toSet;
  var $toList = dartx.toList;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $isEmpty = dartx.isEmpty;
  var $contains = dartx.contains;
  var $where = dartx.where;
  var $addAll = dartx.addAll;
  var $toUpperCase = dartx.toUpperCase;
  var $add = dartx.add;
  var $trim = dartx.trim;
  var $length = dartx.length;
  var $keys = dartx.keys;
  var $containsKey = dartx.containsKey;
  var $cast = dartx.cast;
  var $_set = dartx._set;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $localStorage = dartx.localStorage;
  var $forEach = dartx.forEach;
  var $removeWhere = dartx.removeWhere;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    intTovoid: () => (T.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    ListOfFlashcard: () => (T.ListOfFlashcard = dart.constFn(core.List$(flashcard_model.Flashcard)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    dynamicToFlashcard: () => (T.dynamicToFlashcard = dart.constFn(dart.fnType(flashcard_model.Flashcard, [dart.dynamic])))(),
    JSArrayOfFlashcard: () => (T.JSArrayOfFlashcard = dart.constFn(_interceptors.JSArray$(flashcard_model.Flashcard)))(),
    FlashcardToString: () => (T.FlashcardToString = dart.constFn(dart.fnType(core.String, [flashcard_model.Flashcard])))(),
    FlashcardTobool: () => (T.FlashcardTobool = dart.constFn(dart.fnType(core.bool, [flashcard_model.Flashcard])))(),
    DropdownButtonOfString: () => (T.DropdownButtonOfString = dart.constFn(dropdown.DropdownButton$(core.String)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNTovoid: () => (T.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T.StringN()])))(),
    DropdownMenuItemOfString: () => (T.DropdownMenuItemOfString = dart.constFn(dropdown.DropdownMenuItem$(core.String)))(),
    StringToDropdownMenuItemOfString: () => (T.StringToDropdownMenuItemOfString = dart.constFn(dart.fnType(T.DropdownMenuItemOfString(), [core.String])))(),
    FlashcardToMapOfString$dynamic: () => (T.FlashcardToMapOfString$dynamic = dart.constFn(dart.fnType(T.MapOfString$dynamic(), [flashcard_model.Flashcard])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    BuildContextToAlertDialog: () => (T.BuildContextToAlertDialog = dart.constFn(dart.fnType(dialog.AlertDialog, [framework.BuildContext])))(),
    BuildContextToFlashcardPreviewScreen: () => (T.BuildContextToFlashcardPreviewScreen = dart.constFn(dart.fnType(flashcard_preview_screen.FlashcardPreviewScreen, [framework.BuildContext])))(),
    BuildContextAndintToGestureDetector: () => (T.BuildContextAndintToGestureDetector = dart.constFn(dart.fnType(gesture_detector.GestureDetector, [framework.BuildContext, core.int])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    CompleterOfSharedPreferences: () => (T.CompleterOfSharedPreferences = dart.constFn(async.Completer$(shared_preferences.SharedPreferences)))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart.nullable(T.ListOfString())))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    MapEntryOfString$Object: () => (T.MapEntryOfString$Object = dart.constFn(core.MapEntry$(core.String, core.Object)))(),
    StringAndObjectToMapEntryOfString$Object: () => (T.StringAndObjectToMapEntryOfString$Object = dart.constFn(dart.fnType(T.MapEntryOfString$Object(), [core.String, core.Object])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ExpandoOfObject: () => (T.ExpandoOfObject = dart.constFn(core.Expando$(core.Object)))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    DragEndDetailsTovoid: () => (T.DragEndDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragEndDetails])))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToTransform: () => (T.BuildContextAndWidgetNToTransform = dart.constFn(dart.fnType(basic.Transform, [framework.BuildContext, T.WidgetN()])))(),
    BuildContextAndintToListTile: () => (T.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    LinkedHashMapOfString$Object: () => (T.LinkedHashMapOfString$Object = dart.constFn(collection.LinkedHashMap$(core.String, core.Object)))(),
    StringAndObjectTobool: () => (T.StringAndObjectTobool = dart.constFn(dart.fnType(core.bool, [core.String, core.Object])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 58713
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[4] || CT.C4
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "Practice",
        [BottomNavigationBarItem_activeIcon]: C[3] || CT.C3,
        [BottomNavigationBarItem_icon]: C[3] || CT.C3
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57419
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_shadows]: null,
        [Icon_color]: null,
        [Icon_opticalSize]: null,
        [Icon_grade]: null,
        [Icon_weight]: null,
        [Icon_fill]: null,
        [Icon_size]: null,
        [Icon_icon]: C[7] || CT.C7
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: bottom_navigation_bar_item.BottomNavigationBarItem.prototype,
        [BottomNavigationBarItem_tooltip]: null,
        [BottomNavigationBarItem_backgroundColor]: null,
        [BottomNavigationBarItem_label]: "New",
        [BottomNavigationBarItem_activeIcon]: C[6] || CT.C6,
        [BottomNavigationBarItem_icon]: C[6] || CT.C6
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[5] || CT.C5], bottom_navigation_bar_item.BottomNavigationBarItem);
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[12] || CT.C12
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[11] || CT.C11,
        [MethodChannel_name]: "plugins.flutter.io/shared_preferences"
      });
    }
  }, false);
  var C = Array(13).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/practice_screen.dart",
    "file:///zapp/project/lib/new_flashcard_screen.dart",
    "file:///zapp/project/lib/flashcard_model.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart",
    "package:shared_preferences/shared_preferences.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart",
    "package:plugin_platform_interface/plugin_platform_interface.dart",
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart",
    "package:shared_preferences_web/shared_preferences_web.dart",
    "file:///zapp/project/lib/flashcard_viewer.dart",
    "file:///zapp/project/lib/flashcard_preview_screen.dart",
    "package:shared_preferences_platform_interface/types.dart",
    "file:///zapp/project/lib/flashcard_view.dart",
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  var flashcards$ = dart.privateName(main, "MyFlashcardApp.flashcards");
  main.MyFlashcardApp = class MyFlashcardApp extends framework.StatelessWidget {
    get flashcards() {
      return this[flashcards$];
    }
    set flashcards(value) {
      super.flashcards = value;
    }
    static ['_#new#tearOff'](opts) {
      let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
      return new main.MyFlashcardApp.new({flashcards: flashcards});
    }
    build(context) {
      return new app.MaterialApp.new({title: "Flashcard App", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.blue, visualDensity: theme_data.VisualDensity.adaptivePlatformDensity}), home: new main.FlashcardHomePage.new({flashcards: this.flashcards})});
    }
  };
  (main.MyFlashcardApp.new = function(opts) {
    let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
    this[flashcards$] = flashcards;
    main.MyFlashcardApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyFlashcardApp.prototype;
  dart.addTypeTests(main.MyFlashcardApp);
  dart.addTypeCaches(main.MyFlashcardApp);
  dart.setMethodSignature(main.MyFlashcardApp, () => ({
    __proto__: dart.getMethods(main.MyFlashcardApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyFlashcardApp, I[0]);
  dart.setFieldSignature(main.MyFlashcardApp, () => ({
    __proto__: dart.getFields(main.MyFlashcardApp.__proto__),
    flashcards: dart.finalFieldType(core.List$(flashcard_model.Flashcard))
  }));
  var flashcards$0 = dart.privateName(main, "FlashcardHomePage.flashcards");
  main.FlashcardHomePage = class FlashcardHomePage extends framework.StatefulWidget {
    get flashcards() {
      return this[flashcards$0];
    }
    set flashcards(value) {
      super.flashcards = value;
    }
    static ['_#new#tearOff'](opts) {
      let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
      return new main.FlashcardHomePage.new({flashcards: flashcards});
    }
    createState() {
      return new main._FlashcardHomePageState.new();
    }
  };
  (main.FlashcardHomePage.new = function(opts) {
    let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
    this[flashcards$0] = flashcards;
    main.FlashcardHomePage.__proto__.new.call(this);
    ;
  }).prototype = main.FlashcardHomePage.prototype;
  dart.addTypeTests(main.FlashcardHomePage);
  dart.addTypeCaches(main.FlashcardHomePage);
  dart.setMethodSignature(main.FlashcardHomePage, () => ({
    __proto__: dart.getMethods(main.FlashcardHomePage.__proto__),
    createState: dart.fnType(main._FlashcardHomePageState, [])
  }));
  dart.setLibraryUri(main.FlashcardHomePage, I[0]);
  dart.setFieldSignature(main.FlashcardHomePage, () => ({
    __proto__: dart.getFields(main.FlashcardHomePage.__proto__),
    flashcards: dart.finalFieldType(core.List$(flashcard_model.Flashcard))
  }));
  var _selectedIndex = dart.privateName(main, "_selectedIndex");
  var BottomNavigationBarItem_tooltip = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.tooltip");
  var BottomNavigationBarItem_backgroundColor = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.backgroundColor");
  var BottomNavigationBarItem_label = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.label");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_shadows = dart.privateName(icon, "Icon.shadows");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_opticalSize = dart.privateName(icon, "Icon.opticalSize");
  var Icon_grade = dart.privateName(icon, "Icon.grade");
  var Icon_weight = dart.privateName(icon, "Icon.weight");
  var Icon_fill = dart.privateName(icon, "Icon.fill");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  var BottomNavigationBarItem_activeIcon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.activeIcon");
  var BottomNavigationBarItem_icon = dart.privateName(bottom_navigation_bar_item, "BottomNavigationBarItem.icon");
  main._FlashcardHomePageState = class _FlashcardHomePageState extends framework.State$(main.FlashcardHomePage) {
    build(context) {
      let _screens = T.JSArrayOfWidget().of([new practice_screen.PracticeScreen.new({flashcards: this.widget.flashcards}), new new_flashcard_screen.NewFlashcardScreen.new({flashcards: this.widget.flashcards})]);
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Coding Flashcards")}), body: _screens[$_get](this[_selectedIndex]), bottomNavigationBar: new bottom_navigation_bar.BottomNavigationBar.new({items: C[1] || CT.C1, currentIndex: this[_selectedIndex], selectedItemColor: colors.Colors.blue, onTap: dart.fn(index => {
            this.setState(dart.fn(() => {
              this[_selectedIndex] = index;
            }, T.VoidTovoid()));
          }, T.intTovoid())})});
    }
    static ['_#new#tearOff']() {
      return new main._FlashcardHomePageState.new();
    }
  };
  (main._FlashcardHomePageState.new = function() {
    this[_selectedIndex] = 0;
    main._FlashcardHomePageState.__proto__.new.call(this);
    ;
  }).prototype = main._FlashcardHomePageState.prototype;
  dart.addTypeTests(main._FlashcardHomePageState);
  dart.addTypeCaches(main._FlashcardHomePageState);
  dart.setMethodSignature(main._FlashcardHomePageState, () => ({
    __proto__: dart.getMethods(main._FlashcardHomePageState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main._FlashcardHomePageState, I[0]);
  dart.setFieldSignature(main._FlashcardHomePageState, () => ({
    __proto__: dart.getFields(main._FlashcardHomePageState.__proto__),
    [_selectedIndex]: dart.fieldType(core.int)
  }));
  main.main = function main$0() {
    return async.async(dart.void, function* main$() {
      binding.WidgetsFlutterBinding.ensureInitialized();
      let prefs = (yield shared_preferences.SharedPreferences.getInstance());
      let flashcardsString = prefs.getString("flashcards");
      let flashcards = flashcardsString != null ? T.ListOfFlashcard().from(core.Iterable.as(dart.dsend(convert.json.decode(flashcardsString), 'map', [dart.fn(e => flashcard_model.Flashcard.fromJson(T.MapOfString$dynamic().as(e)), T.dynamicToFlashcard())]))) : T.JSArrayOfFlashcard().of([]);
      binding.runApp(new main.MyFlashcardApp.new({flashcards: flashcards}));
    });
  };
  web_plugin_registrant.registerPlugins = function registerPlugins(pluginRegistrar = null) {
    let t0;
    let registrar = (t0 = pluginRegistrar, t0 == null ? plugin_registry.webPluginRegistrar : t0);
    shared_preferences_web.SharedPreferencesPlugin.registerWith(registrar);
    registrar.registerMessageHandler();
  };
  var flashcards$1 = dart.privateName(practice_screen, "PracticeScreen.flashcards");
  practice_screen.PracticeScreen = class PracticeScreen extends framework.StatefulWidget {
    get flashcards() {
      return this[flashcards$1];
    }
    set flashcards(value) {
      super.flashcards = value;
    }
    static ['_#new#tearOff'](opts) {
      let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
      return new practice_screen.PracticeScreen.new({flashcards: flashcards});
    }
    createState() {
      return new practice_screen._PracticeScreenState.new();
    }
  };
  (practice_screen.PracticeScreen.new = function(opts) {
    let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
    this[flashcards$1] = flashcards;
    practice_screen.PracticeScreen.__proto__.new.call(this);
    ;
  }).prototype = practice_screen.PracticeScreen.prototype;
  dart.addTypeTests(practice_screen.PracticeScreen);
  dart.addTypeCaches(practice_screen.PracticeScreen);
  dart.setMethodSignature(practice_screen.PracticeScreen, () => ({
    __proto__: dart.getMethods(practice_screen.PracticeScreen.__proto__),
    createState: dart.fnType(practice_screen._PracticeScreenState, [])
  }));
  dart.setLibraryUri(practice_screen.PracticeScreen, I[1]);
  dart.setFieldSignature(practice_screen.PracticeScreen, () => ({
    __proto__: dart.getFields(practice_screen.PracticeScreen.__proto__),
    flashcards: dart.finalFieldType(core.List$(flashcard_model.Flashcard))
  }));
  practice_screen._PracticeScreenState = class _PracticeScreenState extends framework.State$(practice_screen.PracticeScreen) {
    initState() {
      super.initState();
      let categories = this.widget.flashcards[$map](core.String, dart.fn(e => e.category, T.FlashcardToString()))[$toSet]()[$toList]();
      this.selectedCategory = categories[$isNotEmpty] ? categories[$first] : null;
    }
    build(context) {
      let categories = this.widget.flashcards[$map](core.String, dart.fn(e => e.category, T.FlashcardToString()))[$toSet]()[$toList]();
      if (categories[$isEmpty]) {
        this.selectedCategory = null;
      } else if (!categories[$contains](this.selectedCategory)) {
        this.selectedCategory = categories[$first];
      }
      let filteredFlashcards = this.selectedCategory != null ? this.widget.flashcards[$where](dart.fn(card => card.category === this.selectedCategory, T.FlashcardTobool()))[$toList]() : T.JSArrayOfFlashcard().of([]);
      return new basic.Column.new({children: (() => {
          let t0 = T.JSArrayOfWidget().of([]);
          if (categories[$isNotEmpty]) t0[$addAll](T.JSArrayOfWidget().of([new (T.DropdownButtonOfString()).new({value: this.selectedCategory, onChanged: dart.fn(newValue => {
                this.setState(dart.fn(() => {
                  this.selectedCategory = newValue;
                }, T.VoidTovoid()));
              }, T.StringNTovoid()), items: categories[$map](T.DropdownMenuItemOfString(), dart.fn(value => new (T.DropdownMenuItemOfString()).new({value: value, child: new text.Text.new(value)}), T.StringToDropdownMenuItemOfString()))[$toList]()})]));
          t0.push(new basic.Expanded.new({child: filteredFlashcards[$isNotEmpty] ? new flashcard_viewer.FlashcardViewer.new({flashcards: filteredFlashcards}) : new basic.Center.new({child: new text.Text.new("There are no cards in this category.")})}));
          return t0;
        })()});
    }
    static ['_#new#tearOff']() {
      return new practice_screen._PracticeScreenState.new();
    }
  };
  (practice_screen._PracticeScreenState.new = function() {
    this.selectedCategory = null;
    practice_screen._PracticeScreenState.__proto__.new.call(this);
    ;
  }).prototype = practice_screen._PracticeScreenState.prototype;
  dart.addTypeTests(practice_screen._PracticeScreenState);
  dart.addTypeCaches(practice_screen._PracticeScreenState);
  dart.setMethodSignature(practice_screen._PracticeScreenState, () => ({
    __proto__: dart.getMethods(practice_screen._PracticeScreenState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(practice_screen._PracticeScreenState, I[1]);
  dart.setFieldSignature(practice_screen._PracticeScreenState, () => ({
    __proto__: dart.getFields(practice_screen._PracticeScreenState.__proto__),
    selectedCategory: dart.fieldType(dart.nullable(core.String))
  }));
  var flashcards$2 = dart.privateName(new_flashcard_screen, "NewFlashcardScreen.flashcards");
  new_flashcard_screen.NewFlashcardScreen = class NewFlashcardScreen extends framework.StatefulWidget {
    get flashcards() {
      return this[flashcards$2];
    }
    set flashcards(value) {
      super.flashcards = value;
    }
    static ['_#new#tearOff'](opts) {
      let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
      return new new_flashcard_screen.NewFlashcardScreen.new({flashcards: flashcards});
    }
    createState() {
      return new new_flashcard_screen._NewFlashcardScreenState.new();
    }
  };
  (new_flashcard_screen.NewFlashcardScreen.new = function(opts) {
    let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
    this[flashcards$2] = flashcards;
    new_flashcard_screen.NewFlashcardScreen.__proto__.new.call(this);
    ;
  }).prototype = new_flashcard_screen.NewFlashcardScreen.prototype;
  dart.addTypeTests(new_flashcard_screen.NewFlashcardScreen);
  dart.addTypeCaches(new_flashcard_screen.NewFlashcardScreen);
  dart.setMethodSignature(new_flashcard_screen.NewFlashcardScreen, () => ({
    __proto__: dart.getMethods(new_flashcard_screen.NewFlashcardScreen.__proto__),
    createState: dart.fnType(new_flashcard_screen._NewFlashcardScreenState, [])
  }));
  dart.setLibraryUri(new_flashcard_screen.NewFlashcardScreen, I[2]);
  dart.setFieldSignature(new_flashcard_screen.NewFlashcardScreen, () => ({
    __proto__: dart.getFields(new_flashcard_screen.NewFlashcardScreen.__proto__),
    flashcards: dart.finalFieldType(core.List$(flashcard_model.Flashcard))
  }));
  var _questionController = dart.privateName(new_flashcard_screen, "_questionController");
  var _answerController = dart.privateName(new_flashcard_screen, "_answerController");
  var _newCategoryController = dart.privateName(new_flashcard_screen, "_newCategoryController");
  var _selectedCategory = dart.privateName(new_flashcard_screen, "_selectedCategory");
  var _categories = dart.privateName(new_flashcard_screen, "_categories");
  var _loadCategories = dart.privateName(new_flashcard_screen, "_loadCategories");
  var _saveCategories = dart.privateName(new_flashcard_screen, "_saveCategories");
  var _saveFlashcards = dart.privateName(new_flashcard_screen, "_saveFlashcards");
  var _addFlashcard = dart.privateName(new_flashcard_screen, "_addFlashcard");
  var _addCategory = dart.privateName(new_flashcard_screen, "_addCategory");
  var _showAddCategoryDialog = dart.privateName(new_flashcard_screen, "_showAddCategoryDialog");
  var _navigateToCategory = dart.privateName(new_flashcard_screen, "_navigateToCategory");
  new_flashcard_screen._NewFlashcardScreenState = class _NewFlashcardScreenState extends framework.State$(new_flashcard_screen.NewFlashcardScreen) {
    initState() {
      super.initState();
      this[_loadCategories]();
    }
    [_loadCategories]() {
      return async.async(dart.void, (function* _loadCategories() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let categoriesString = prefs.getString("categories");
        if (categoriesString != null) {
          this.setState(dart.fn(() => {
            this[_categories] = T.ListOfString().from(core.Iterable.as(convert.json.decode(categoriesString)));
          }, T.VoidTovoid()));
        }
      }).bind(this));
    }
    [_saveCategories]() {
      return async.async(dart.void, (function* _saveCategories() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let encodedData = convert.json.encode(this[_categories]);
        yield prefs.setString("categories", encodedData);
      }).bind(this));
    }
    [_addFlashcard]() {
      return async.async(dart.void, (function* _addFlashcard() {
        let question = this[_questionController].text;
        let answer = this[_answerController].text;
        let category = this[_selectedCategory];
        let isQuestionValid = question[$isNotEmpty] && question[$_get](0) === question[$_get](0)[$toUpperCase]();
        let isAnswerValid = answer[$isNotEmpty] && answer[$_get](0) === answer[$_get](0)[$toUpperCase]();
        if (!isQuestionValid || !isAnswerValid) {
          scaffold.ScaffoldMessenger.of(this.context).showSnackBar(new snack_bar.SnackBar.new({content: new text.Text.new("Both question and answer fields must be filled out, and each must start with a capital letter")}));
          return;
        }
        let newFlashcard = new flashcard_model.Flashcard.new({question: question, answer: answer, category: category});
        this.setState(dart.fn(() => {
          this.widget.flashcards[$add](newFlashcard);
          this[_saveFlashcards]();
          this[_questionController].clear();
          this[_answerController].clear();
        }, T.VoidTovoid()));
      }).bind(this));
    }
    [_saveFlashcards]() {
      return async.async(dart.void, (function* _saveFlashcards() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let encodedData = convert.json.encode(this.widget.flashcards[$map](T.MapOfString$dynamic(), dart.fn(e => e.toJson(), T.FlashcardToMapOfString$dynamic()))[$toList]());
        yield prefs.setString("flashcards", encodedData);
      }).bind(this));
    }
    [_showAddCategoryDialog]() {
      dialog.showDialog(dart.dynamic, {context: this.context, builder: dart.fn(context => new dialog.AlertDialog.new({title: new text.Text.new("Add New Category"), content: new text_field.TextField.new({controller: this[_newCategoryController], decoration: new input_decorator.InputDecoration.new({hintText: "Category Name"})}), actions: T.JSArrayOfWidget().of([new text_button.TextButton.new({child: new text.Text.new("Cancel"), onPressed: dart.fn(() => {
                navigator.Navigator.of(context).pop(T.ObjectN());
              }, T.VoidTovoid())}), new text_button.TextButton.new({child: new text.Text.new("Add"), onPressed: dart.fn(() => {
                this[_addCategory]();
                navigator.Navigator.of(context).pop(T.ObjectN());
              }, T.VoidTovoid())})])}), T.BuildContextToAlertDialog())});
    }
    [_addCategory]() {
      let newCategory = this[_newCategoryController].text[$trim]();
      if (newCategory[$isNotEmpty] && !this[_categories][$contains](newCategory)) {
        this.setState(dart.fn(() => {
          this[_categories][$add](newCategory);
          this[_selectedCategory] = newCategory;
          this[_newCategoryController].clear();
        }, T.VoidTovoid()));
        this[_saveCategories]();
      }
    }
    [_navigateToCategory](category) {
      navigator.Navigator.push(dart.dynamic, this.context, new page.MaterialPageRoute.new({builder: dart.fn(context => new flashcard_preview_screen.FlashcardPreviewScreen.new({flashcards: this.widget.flashcards[$where](dart.fn(card => card.category === category, T.FlashcardTobool()))[$toList](), category: category, onFlashcardChanged: dart.fn(() => {
            this.setState(dart.fn(() => {
            }, T.VoidTovoid()));
          }, T.VoidTovoid())}), T.BuildContextToFlashcardPreviewScreen())}));
    }
    build(context) {
      let t1;
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("New Flashcard")}), body: new single_child_scroll_view.SingleChildScrollView.new({padding: new edge_insets.EdgeInsets.all(16), child: new basic.Column.new({children: T.JSArrayOfWidget().of([new text_field.TextField.new({controller: this[_questionController], decoration: new input_decorator.InputDecoration.new({labelText: "Question", border: new input_border.OutlineInputBorder.new()})}), new basic.SizedBox.new({height: 8}), new text_field.TextField.new({controller: this[_answerController], decoration: new input_decorator.InputDecoration.new({labelText: "Answer", border: new input_border.OutlineInputBorder.new()})}), new basic.SizedBox.new({height: 8}), new container.Container.new({padding: new edge_insets.EdgeInsets.symmetric({horizontal: 12, vertical: 4}), decoration: new box_decoration.BoxDecoration.new({borderRadius: new border_radius.BorderRadius.circular(12), border: box_border.Border.all({color: colors.Colors.blue, width: 1})}), child: new dropdown.DropdownButtonHideUnderline.new({child: new (T.DropdownButtonOfString()).new({isExpanded: true, value: this[_selectedCategory], icon: new icon.Icon.new(icons.Icons.arrow_drop_down, {color: colors.Colors.blue}), onChanged: dart.fn(newValue => {
                      if (newValue === "Add New Category") {
                        this[_showAddCategoryDialog]();
                      } else {
                        this.setState(dart.fn(() => {
                          this[_selectedCategory] = dart.nullCheck(newValue);
                        }, T.VoidTovoid()));
                      }
                    }, T.StringNTovoid()), items: (t1 = this[_categories][$map](T.DropdownMenuItemOfString(), dart.fn(value => new (T.DropdownMenuItemOfString()).new({value: value, child: new text.Text.new(value)}), T.StringToDropdownMenuItemOfString()))[$toList](), (() => {
                      t1[$add](new (T.DropdownMenuItemOfString()).new({value: "Add New Category", child: new basic.Row.new({children: T.JSArrayOfWidget().of([new icon.Icon.new(icons.Icons.add, {color: colors.Colors.blue}), new text.Text.new(" Add New Category")])})}));
                      return t1;
                    })())})})}), new basic.SizedBox.new({height: 16}), new elevated_button.ElevatedButton.new({style: elevated_button.ElevatedButton.styleFrom({padding: new edge_insets.EdgeInsets.symmetric({horizontal: 50, vertical: 20}), textStyle: new text_style.TextStyle.new({fontSize: 18})}), onPressed: dart.bind(this, _addFlashcard), child: new text.Text.new("Add Flashcard")}), new basic.SizedBox.new({height: 20}), new scroll_view.GridView.builder({shrinkWrap: true, physics: new scroll_physics.ClampingScrollPhysics.new(), gridDelegate: new sliver_grid.SliverGridDelegateWithFixedCrossAxisCount.new({crossAxisCount: 3, crossAxisSpacing: 10, mainAxisSpacing: 10, childAspectRatio: 3 / 1}), itemCount: this[_categories][$length], itemBuilder: dart.fn((context, index) => new gesture_detector.GestureDetector.new({onTap: dart.fn(() => this[_navigateToCategory](this[_categories][$_get](index)), T.VoidTovoid()), child: new container.Container.new({decoration: new box_decoration.BoxDecoration.new({color: colors.Colors.blue.shade100, borderRadius: new border_radius.BorderRadius.circular(8)}), child: new basic.Center.new({child: new text.Text.new(this[_categories][$_get](index), {style: new text_style.TextStyle.new({fontWeight: ui.FontWeight.bold, color: colors.Colors.blue})})})})}), T.BuildContextAndintToGestureDetector())}), new basic.SizedBox.new({height: 20})])})})});
    }
    static ['_#new#tearOff']() {
      return new new_flashcard_screen._NewFlashcardScreenState.new();
    }
  };
  (new_flashcard_screen._NewFlashcardScreenState.new = function() {
    this[_questionController] = new editable_text.TextEditingController.new();
    this[_answerController] = new editable_text.TextEditingController.new();
    this[_newCategoryController] = new editable_text.TextEditingController.new();
    this[_selectedCategory] = "General";
    this[_categories] = T.JSArrayOfString().of(["General"]);
    new_flashcard_screen._NewFlashcardScreenState.__proto__.new.call(this);
    ;
  }).prototype = new_flashcard_screen._NewFlashcardScreenState.prototype;
  dart.addTypeTests(new_flashcard_screen._NewFlashcardScreenState);
  dart.addTypeCaches(new_flashcard_screen._NewFlashcardScreenState);
  dart.setMethodSignature(new_flashcard_screen._NewFlashcardScreenState, () => ({
    __proto__: dart.getMethods(new_flashcard_screen._NewFlashcardScreenState.__proto__),
    [_loadCategories]: dart.fnType(dart.void, []),
    [_saveCategories]: dart.fnType(async.Future$(dart.void), []),
    [_addFlashcard]: dart.fnType(dart.void, []),
    [_saveFlashcards]: dart.fnType(async.Future$(dart.void), []),
    [_showAddCategoryDialog]: dart.fnType(dart.void, []),
    [_addCategory]: dart.fnType(dart.void, []),
    [_navigateToCategory]: dart.fnType(dart.void, [core.String]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(new_flashcard_screen._NewFlashcardScreenState, I[2]);
  dart.setFieldSignature(new_flashcard_screen._NewFlashcardScreenState, () => ({
    __proto__: dart.getFields(new_flashcard_screen._NewFlashcardScreenState.__proto__),
    [_questionController]: dart.finalFieldType(editable_text.TextEditingController),
    [_answerController]: dart.finalFieldType(editable_text.TextEditingController),
    [_newCategoryController]: dart.finalFieldType(editable_text.TextEditingController),
    [_selectedCategory]: dart.fieldType(core.String),
    [_categories]: dart.fieldType(core.List$(core.String))
  }));
  var question$ = dart.privateName(flashcard_model, "Flashcard.question");
  var answer$ = dart.privateName(flashcard_model, "Flashcard.answer");
  var category$ = dart.privateName(flashcard_model, "Flashcard.category");
  flashcard_model.Flashcard = class Flashcard extends core.Object {
    get question() {
      return this[question$];
    }
    set question(value) {
      this[question$] = value;
    }
    get answer() {
      return this[answer$];
    }
    set answer(value) {
      this[answer$] = value;
    }
    get category() {
      return this[category$];
    }
    set category(value) {
      this[category$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let question = opts && 'question' in opts ? opts.question : null;
      let answer = opts && 'answer' in opts ? opts.answer : null;
      let category = opts && 'category' in opts ? opts.category : "General";
      return new flashcard_model.Flashcard.new({question: question, answer: answer, category: category});
    }
    static fromJson(jsonData) {
      let t1;
      return new flashcard_model.Flashcard.new({question: core.String.as(jsonData[$_get]("question")), answer: core.String.as(jsonData[$_get]("answer")), category: core.String.as((t1 = jsonData[$_get]("category"), t1 == null ? "General" : t1))});
    }
    static ['_#fromJson#tearOff'](jsonData) {
      return flashcard_model.Flashcard.fromJson(jsonData);
    }
    toJson() {
      return new (T.IdentityMapOfString$dynamic()).from(["question", this.question, "answer", this.answer, "category", this.category]);
    }
  };
  (flashcard_model.Flashcard.new = function(opts) {
    let question = opts && 'question' in opts ? opts.question : null;
    let answer = opts && 'answer' in opts ? opts.answer : null;
    let category = opts && 'category' in opts ? opts.category : "General";
    this[question$] = question;
    this[answer$] = answer;
    this[category$] = category;
    ;
  }).prototype = flashcard_model.Flashcard.prototype;
  dart.addTypeTests(flashcard_model.Flashcard);
  dart.addTypeCaches(flashcard_model.Flashcard);
  dart.setMethodSignature(flashcard_model.Flashcard, () => ({
    __proto__: dart.getMethods(flashcard_model.Flashcard.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setStaticMethodSignature(flashcard_model.Flashcard, () => ['fromJson']);
  dart.setLibraryUri(flashcard_model.Flashcard, I[3]);
  dart.setFieldSignature(flashcard_model.Flashcard, () => ({
    __proto__: dart.getFields(flashcard_model.Flashcard.__proto__),
    question: dart.fieldType(core.String),
    answer: dart.fieldType(core.String),
    category: dart.fieldType(core.String)
  }));
  var _preferenceCache$ = dart.privateName(shared_preferences, "_preferenceCache");
  var _setValue = dart.privateName(shared_preferences, "_setValue");
  shared_preferences.SharedPreferences = class SharedPreferences extends core.Object {
    static ['_#_#tearOff'](_preferenceCache) {
      return new shared_preferences.SharedPreferences.__(_preferenceCache);
    }
    static get _store() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance;
    }
    static setPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      if (shared_preferences.SharedPreferences._completer != null) {
        dart.throw(new core.StateError.new("setPrefix cannot be called after getInstance"));
      }
      shared_preferences.SharedPreferences._prefix = prefix;
      shared_preferences.SharedPreferences._prefixHasBeenChanged = true;
      shared_preferences.SharedPreferences._allowList = allowList;
    }
    static resetStatic() {
      shared_preferences.SharedPreferences._completer = null;
      shared_preferences.SharedPreferences._prefix = "flutter.";
      shared_preferences.SharedPreferences._prefixHasBeenChanged = false;
      shared_preferences.SharedPreferences._allowList = null;
    }
    static getInstance() {
      return async.async(shared_preferences.SharedPreferences, function* getInstance() {
        if (shared_preferences.SharedPreferences._completer == null) {
          let completer = T.CompleterOfSharedPreferences().new();
          shared_preferences.SharedPreferences._completer = completer;
          try {
            let preferencesMap = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
            completer.complete(new shared_preferences.SharedPreferences.__(preferencesMap));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              completer.completeError(e);
              let sharedPrefsFuture = completer.future;
              shared_preferences.SharedPreferences._completer = null;
              return sharedPrefsFuture;
            } else
              throw e$;
          }
        }
        return dart.nullCheck(shared_preferences.SharedPreferences._completer).future;
      });
    }
    getKeys() {
      return T.LinkedHashSetOfString().from(this[_preferenceCache$][$keys]);
    }
    get(key) {
      return this[_preferenceCache$][$_get](key);
    }
    getBool(key) {
      return T.boolN().as(this[_preferenceCache$][$_get](key));
    }
    getInt(key) {
      return T.intN().as(this[_preferenceCache$][$_get](key));
    }
    getDouble(key) {
      return T.doubleN().as(this[_preferenceCache$][$_get](key));
    }
    getString(key) {
      return T.StringN().as(this[_preferenceCache$][$_get](key));
    }
    containsKey(key) {
      return this[_preferenceCache$][$containsKey](key);
    }
    getStringList(key) {
      let t2;
      let list = T.ListN().as(this[_preferenceCache$][$_get](key));
      if (list != null && !T.ListOfString().is(list)) {
        list = list[$cast](core.String)[$toList]();
        this[_preferenceCache$][$_set](key, list);
      }
      return T.ListNOfString().as((t2 = list, t2 == null ? null : t2[$toList]()));
    }
    setBool(key, value) {
      return this[_setValue]("Bool", key, value);
    }
    setInt(key, value) {
      return this[_setValue]("Int", key, value);
    }
    setDouble(key, value) {
      return this[_setValue]("Double", key, value);
    }
    setString(key, value) {
      return this[_setValue]("String", key, value);
    }
    setStringList(key, value) {
      return this[_setValue]("StringList", key, value);
    }
    remove(key) {
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      this[_preferenceCache$][$remove](key);
      return shared_preferences.SharedPreferences._store.remove(prefixedKey);
    }
    [_setValue](valueType, key, value) {
      core.ArgumentError.checkNotNull(core.Object, value, "value");
      let prefixedKey = shared_preferences.SharedPreferences._prefix + key;
      if (T.ListOfString().is(value)) {
        this[_preferenceCache$][$_set](key, value[$toList]());
      } else {
        this[_preferenceCache$][$_set](key, value);
      }
      return shared_preferences.SharedPreferences._store.setValue(valueType, prefixedKey, value);
    }
    commit() {
      return async.async(core.bool, function* commit() {
        return true;
      });
    }
    clear() {
      this[_preferenceCache$][$clear]();
      if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
        try {
          return shared_preferences.SharedPreferences._store.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})}));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (core.UnimplementedError.is(e)) {
              dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
      }
      return shared_preferences.SharedPreferences._store.clear();
    }
    reload() {
      return async.async(dart.void, (function* reload() {
        let preferences = (yield shared_preferences.SharedPreferences._getSharedPreferencesMap());
        this[_preferenceCache$][$clear]();
        this[_preferenceCache$][$addAll](preferences);
      }).bind(this));
    }
    static _getSharedPreferencesMap() {
      return async.async(T.MapOfString$Object(), function* _getSharedPreferencesMap() {
        let fromSystem = new (T.IdentityMapOfString$Object()).new();
        if (shared_preferences.SharedPreferences._prefixHasBeenChanged) {
          try {
            fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: shared_preferences.SharedPreferences._prefix, allowList: shared_preferences.SharedPreferences._allowList})})));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              if (core.UnimplementedError.is(e)) {
                dart.throw(new core.UnimplementedError.new("This implementation of Shared Preferences doesn't yet support the setPrefix method.\nEither update the implementation to support setPrefix, or do not call setPrefix.\n        "));
              } else {
                dart.rethrow(e$);
              }
            } else
              throw e$;
          }
        } else {
          fromSystem[$addAll](yield shared_preferences.SharedPreferences._store.getAll());
        }
        if (shared_preferences.SharedPreferences._prefix[$isEmpty]) {
          return fromSystem;
        }
        let preferencesMap = new (T.IdentityMapOfString$Object()).new();
        for (let key of fromSystem[$keys]) {
          if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) dart.assertFailed(null, I[4], 264, 14, "key.startsWith(_prefix)");
          preferencesMap[$_set](key[$substring](shared_preferences.SharedPreferences._prefix.length), dart.nullCheck(fromSystem[$_get](key)));
        }
        return preferencesMap;
      });
    }
    static setMockInitialValues(values) {
      let newValues = values[$map](core.String, core.Object, dart.fn((key, value) => {
        let newKey = key;
        if (!key[$startsWith](shared_preferences.SharedPreferences._prefix)) {
          newKey = shared_preferences.SharedPreferences._prefix + key;
        }
        return new (T.MapEntryOfString$Object()).__(newKey, value);
      }, T.StringAndObjectToMapEntryOfString$Object()));
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(newValues);
      shared_preferences.SharedPreferences._completer = null;
    }
  };
  (shared_preferences.SharedPreferences.__ = function(_preferenceCache) {
    this[_preferenceCache$] = _preferenceCache;
    ;
  }).prototype = shared_preferences.SharedPreferences.prototype;
  dart.addTypeTests(shared_preferences.SharedPreferences);
  dart.addTypeCaches(shared_preferences.SharedPreferences);
  dart.setMethodSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getMethods(shared_preferences.SharedPreferences.__proto__),
    getKeys: dart.fnType(core.Set$(core.String), []),
    get: dart.fnType(dart.nullable(core.Object), [core.String]),
    getBool: dart.fnType(dart.nullable(core.bool), [core.String]),
    getInt: dart.fnType(dart.nullable(core.int), [core.String]),
    getDouble: dart.fnType(dart.nullable(core.double), [core.String]),
    getString: dart.fnType(dart.nullable(core.String), [core.String]),
    containsKey: dart.fnType(core.bool, [core.String]),
    getStringList: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    setBool: dart.fnType(async.Future$(core.bool), [core.String, core.bool]),
    setInt: dart.fnType(async.Future$(core.bool), [core.String, core.int]),
    setDouble: dart.fnType(async.Future$(core.bool), [core.String, core.double]),
    setString: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(core.bool), [core.String, core.List$(core.String)]),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    [_setValue]: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    commit: dart.fnType(async.Future$(core.bool), []),
    clear: dart.fnType(async.Future$(core.bool), []),
    reload: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(shared_preferences.SharedPreferences, () => ['setPrefix', 'resetStatic', 'getInstance', '_getSharedPreferencesMap', 'setMockInitialValues']);
  dart.setStaticGetterSignature(shared_preferences.SharedPreferences, () => ['_store']);
  dart.setLibraryUri(shared_preferences.SharedPreferences, I[5]);
  dart.setFieldSignature(shared_preferences.SharedPreferences, () => ({
    __proto__: dart.getFields(shared_preferences.SharedPreferences.__proto__),
    [_preferenceCache$]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences.SharedPreferences, () => ['_prefix', '_prefixHasBeenChanged', '_allowList', '_completer']);
  dart.defineLazy(shared_preferences.SharedPreferences, {
    /*shared_preferences.SharedPreferences._prefix*/get _prefix() {
      return "flutter.";
    },
    set _prefix(value) {},
    /*shared_preferences.SharedPreferences._prefixHasBeenChanged*/get _prefixHasBeenChanged() {
      return false;
    },
    set _prefixHasBeenChanged(value) {},
    /*shared_preferences.SharedPreferences._allowList*/get _allowList() {
      return null;
    },
    set _allowList(value) {},
    /*shared_preferences.SharedPreferences._completer*/get _completer() {
      return null;
    },
    set _completer(value) {}
  }, false);
  var _getFilteredKeys = dart.privateName(shared_preferences_web, "_getFilteredKeys");
  var _decodeValue = dart.privateName(shared_preferences_web, "_decodeValue");
  var _encodeValue = dart.privateName(shared_preferences_web, "_encodeValue");
  plugin_platform_interface.PlatformInterface = class PlatformInterface extends core.Object {
    static verify(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: true});
    }
    static verifyToken(instance, token) {
      plugin_platform_interface.PlatformInterface._verify(instance, token, {preventConstObject: false});
    }
    static _verify(instance, token, opts) {
      let preventConstObject = opts && 'preventConstObject' in opts ? opts.preventConstObject : null;
      if (plugin_platform_interface.MockPlatformInterfaceMixin.is(instance)) {
        let assertionsEnabled = false;
        if (!dart.fn(() => {
          assertionsEnabled = true;
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[6], 92, 14, "() {\n        assertionsEnabled = true;\n        return true;\n      }()");
        if (!assertionsEnabled) {
          dart.throw(new core.AssertionError.new("`MockPlatformInterfaceMixin` is not intended for use in release builds."));
        }
        return;
      }
      if (preventConstObject && plugin_platform_interface.PlatformInterface._instanceTokens._get(instance) === (C[8] || CT.C8)) {
        dart.throw(new core.AssertionError.new("`const Object()` cannot be used as the token."));
      }
      if (token !== plugin_platform_interface.PlatformInterface._instanceTokens._get(instance)) {
        dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
      }
    }
  };
  (plugin_platform_interface.PlatformInterface.new = function(opts) {
    let token = opts && 'token' in opts ? opts.token : null;
    plugin_platform_interface.PlatformInterface._instanceTokens._set(this, token);
  }).prototype = plugin_platform_interface.PlatformInterface.prototype;
  dart.addTypeTests(plugin_platform_interface.PlatformInterface);
  dart.addTypeCaches(plugin_platform_interface.PlatformInterface);
  dart.setStaticMethodSignature(plugin_platform_interface.PlatformInterface, () => ['verify', 'verifyToken', '_verify']);
  dart.setLibraryUri(plugin_platform_interface.PlatformInterface, I[7]);
  dart.setStaticFieldSignature(plugin_platform_interface.PlatformInterface, () => ['_instanceTokens']);
  dart.defineLazy(plugin_platform_interface.PlatformInterface, {
    /*plugin_platform_interface.PlatformInterface._instanceTokens*/get _instanceTokens() {
      return new (T.ExpandoOfObject()).new();
    }
  }, false);
  shared_preferences_platform_interface.SharedPreferencesStorePlatform = class SharedPreferencesStorePlatform extends plugin_platform_interface.PlatformInterface {
    static get instance() {
      return shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance;
    }
    static set instance(instance) {
      if (!instance.isMock) {
        plugin_platform_interface.PlatformInterface.verify(instance, shared_preferences_platform_interface.SharedPreferencesStorePlatform._token);
      }
      shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance = instance;
    }
    get isMock() {
      return false;
    }
    clearWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("clearWithPrefix is not implemented."));
    }
    clearWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("clearWithParameters is not implemented."));
    }
    getAllWithPrefix(prefix) {
      dart.throw(new core.UnimplementedError.new("getAllWithPrefix is not implemented."));
    }
    getAllWithParameters(parameters) {
      dart.throw(new core.UnimplementedError.new("getAllWithParameters is not implemented."));
    }
  };
  (shared_preferences_platform_interface.SharedPreferencesStorePlatform.new = function() {
    shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__.new.call(this, {token: shared_preferences_platform_interface.SharedPreferencesStorePlatform._token});
    ;
  }).prototype = shared_preferences_platform_interface.SharedPreferencesStorePlatform.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.addTypeCaches(shared_preferences_platform_interface.SharedPreferencesStorePlatform);
  dart.setMethodSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    clearWithPrefix: dart.fnType(async.Future$(core.bool), [core.String]),
    clearWithParameters: dart.fnType(async.Future$(core.bool), [types.ClearParameters]),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String]),
    getAllWithParameters: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [types.GetAllParameters])
  }));
  dart.setGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ({
    __proto__: dart.getGetters(shared_preferences_platform_interface.SharedPreferencesStorePlatform.__proto__),
    isMock: core.bool
  }));
  dart.setStaticGetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setStaticSetterSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['instance']);
  dart.setLibraryUri(shared_preferences_platform_interface.SharedPreferencesStorePlatform, I[8]);
  dart.setStaticFieldSignature(shared_preferences_platform_interface.SharedPreferencesStorePlatform, () => ['_token', '_instance']);
  dart.defineLazy(shared_preferences_platform_interface.SharedPreferencesStorePlatform, {
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*shared_preferences_platform_interface.SharedPreferencesStorePlatform._instance*/get _instance() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    },
    set _instance(value) {}
  }, false);
  shared_preferences_web.SharedPreferencesPlugin = class SharedPreferencesPlugin extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static registerWith(registrar) {
      shared_preferences_platform_interface.SharedPreferencesStorePlatform.instance = new shared_preferences_web.SharedPreferencesPlugin.new();
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})[$forEach](dart.bind(html.window[$localStorage], $remove));
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let allData = new (T.IdentityMapOfString$Object()).new();
        for (let key of this[_getFilteredKeys](filter.prefix, {allowList: filter.allowList})) {
          allData[$_set](key, this[_decodeValue](dart.nullCheck(html.window[$localStorage][$_get](key))));
        }
        return allData;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, function* remove() {
        html.window[$localStorage][$remove](key);
        return true;
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        html.window[$localStorage][$_set](key, this[_encodeValue](value));
        return true;
      }).bind(this));
    }
    [_getFilteredKeys](prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return html.window[$localStorage][$keys][$where](dart.fn(key => {
        let t4, t4$;
        return key[$startsWith](prefix) && dart.test((t4$ = (t4 = allowList, t4 == null ? null : t4.contains(key)), t4$ == null ? true : t4$));
      }, T.StringTobool()));
    }
    [_encodeValue](value) {
      return convert.json.encode(value);
    }
    [_decodeValue](encodedValue) {
      let decodedValue = convert.json.decode(encodedValue);
      if (core.List.is(decodedValue)) {
        return decodedValue[$cast](core.String);
      }
      return dart.nullCheck(decodedValue);
    }
    static ['_#new#tearOff']() {
      return new shared_preferences_web.SharedPreferencesPlugin.new();
    }
  };
  (shared_preferences_web.SharedPreferencesPlugin.new = function() {
    shared_preferences_web.SharedPreferencesPlugin.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_web.SharedPreferencesPlugin.prototype;
  dart.addTypeTests(shared_preferences_web.SharedPreferencesPlugin);
  dart.addTypeCaches(shared_preferences_web.SharedPreferencesPlugin);
  dart.setMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ({
    __proto__: dart.getMethods(shared_preferences_web.SharedPreferencesPlugin.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, dart.nullable(core.Object)]),
    [_getFilteredKeys]: dart.fnType(core.Iterable$(core.String), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {}),
    [_encodeValue]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_decodeValue]: dart.fnType(core.Object, [core.String])
  }));
  dart.setStaticMethodSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['registerWith']);
  dart.setLibraryUri(shared_preferences_web.SharedPreferencesPlugin, I[9]);
  dart.setStaticFieldSignature(shared_preferences_web.SharedPreferencesPlugin, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_web.SharedPreferencesPlugin, {
    /*shared_preferences_web.SharedPreferencesPlugin._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var flashcards$3 = dart.privateName(flashcard_viewer, "FlashcardViewer.flashcards");
  flashcard_viewer.FlashcardViewer = class FlashcardViewer extends framework.StatefulWidget {
    get flashcards() {
      return this[flashcards$3];
    }
    set flashcards(value) {
      super.flashcards = value;
    }
    static ['_#new#tearOff'](opts) {
      let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
      return new flashcard_viewer.FlashcardViewer.new({flashcards: flashcards});
    }
    createState() {
      return new flashcard_viewer._FlashcardViewerState.new();
    }
  };
  (flashcard_viewer.FlashcardViewer.new = function(opts) {
    let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
    this[flashcards$3] = flashcards;
    flashcard_viewer.FlashcardViewer.__proto__.new.call(this);
    ;
  }).prototype = flashcard_viewer.FlashcardViewer.prototype;
  dart.addTypeTests(flashcard_viewer.FlashcardViewer);
  dart.addTypeCaches(flashcard_viewer.FlashcardViewer);
  dart.setMethodSignature(flashcard_viewer.FlashcardViewer, () => ({
    __proto__: dart.getMethods(flashcard_viewer.FlashcardViewer.__proto__),
    createState: dart.fnType(flashcard_viewer._FlashcardViewerState, [])
  }));
  dart.setLibraryUri(flashcard_viewer.FlashcardViewer, I[10]);
  dart.setFieldSignature(flashcard_viewer.FlashcardViewer, () => ({
    __proto__: dart.getFields(flashcard_viewer.FlashcardViewer.__proto__),
    flashcards: dart.finalFieldType(core.List$(flashcard_model.Flashcard))
  }));
  var ___FlashcardViewerState__controller = dart.privateName(flashcard_viewer, "_#_FlashcardViewerState#_controller");
  var ___FlashcardViewerState__flipAnimation = dart.privateName(flashcard_viewer, "_#_FlashcardViewerState#_flipAnimation");
  var _currentIndex = dart.privateName(flashcard_viewer, "_currentIndex");
  var _controller = dart.privateName(flashcard_viewer, "_controller");
  var _flipAnimation = dart.privateName(flashcard_viewer, "_flipAnimation");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _flipCard = dart.privateName(flashcard_viewer, "_flipCard");
  var _nextCard = dart.privateName(flashcard_viewer, "_nextCard");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(flashcard_viewer.FlashcardViewer) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(flashcard_viewer.FlashcardViewer)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(flashcard_viewer.FlashcardViewer));
  flashcard_viewer._FlashcardViewerState = class _FlashcardViewerState extends State_SingleTickerProviderStateMixin$36 {
    get [_controller]() {
      let t4;
      t4 = this[___FlashcardViewerState__controller];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t4;
    }
    set [_controller](_controller$35param) {
      this[___FlashcardViewerState__controller] = _controller$35param;
    }
    get [_flipAnimation]() {
      let t4;
      t4 = this[___FlashcardViewerState__flipAnimation];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_flipAnimation")) : t4;
    }
    set [_flipAnimation](_flipAnimation$35param) {
      this[___FlashcardViewerState__flipAnimation] = _flipAnimation$35param;
    }
    initState() {
      super.initState();
      this[_controller] = new animation_controller.AnimationController.new({duration: C[9] || CT.C9, vsync: this});
      this[_flipAnimation] = new (T.TweenOfdouble()).new({begin: 0, end: 3.141592653589793}).animate(this[_controller]);
    }
    dispose() {
      this[_controller].dispose();
      super.dispose();
    }
    [_flipCard]() {
      if (this[_controller].isCompleted || this[_controller].velocity > 0)
        this[_controller].reverse();
      else
        this[_controller].forward();
    }
    [_nextCard]() {
      if (this[_currentIndex] < this.widget.flashcards[$length] - 1) {
        this[_currentIndex] = this[_currentIndex] + 1;
      } else {
        this[_currentIndex] = 0;
      }
      this[_controller].reset();
      this.setState(dart.fn(() => {
      }, T.VoidTovoid()));
    }
    build(context) {
      let currentFlashcard = this.widget.flashcards[$_get](this[_currentIndex]);
      return new gesture_detector.GestureDetector.new({onTap: dart.bind(this, _nextCard), onHorizontalDragEnd: dart.fn(details => this[_flipCard](), T.DragEndDetailsTovoid()), child: new transitions.AnimatedBuilder.new({animation: this[_flipAnimation], builder: dart.fn((context, child) => {
            let t4, t4$;
            let isFront = this[_controller].value < 0.5;
            return new basic.Transform.new({transform: (t4 = vector_math_64.Matrix4.identity(), (() => {
                t4.setEntry(3, 2, 0.001);
                t4.rotateY(this[_flipAnimation].value);
                return t4;
              })()), alignment: alignment.Alignment.center, child: isFront ? new flashcard_view.FlashcardView.new({text: currentFlashcard.question}) : new basic.Transform.new({alignment: alignment.Alignment.center, transform: (t4$ = vector_math_64.Matrix4.identity(), (() => {
                  t4$.rotateY(3.141592653589793);
                  return t4$;
                })()), child: new flashcard_view.FlashcardView.new({text: currentFlashcard.answer})})});
          }, T.BuildContextAndWidgetNToTransform())})});
    }
    static ['_#new#tearOff']() {
      return new flashcard_viewer._FlashcardViewerState.new();
    }
  };
  (flashcard_viewer._FlashcardViewerState.new = function() {
    this[___FlashcardViewerState__controller] = null;
    this[___FlashcardViewerState__flipAnimation] = null;
    this[_currentIndex] = 0;
    flashcard_viewer._FlashcardViewerState.__proto__.new.call(this);
    ;
  }).prototype = flashcard_viewer._FlashcardViewerState.prototype;
  dart.addTypeTests(flashcard_viewer._FlashcardViewerState);
  dart.addTypeCaches(flashcard_viewer._FlashcardViewerState);
  dart.setMethodSignature(flashcard_viewer._FlashcardViewerState, () => ({
    __proto__: dart.getMethods(flashcard_viewer._FlashcardViewerState.__proto__),
    [_flipCard]: dart.fnType(dart.void, []),
    [_nextCard]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(flashcard_viewer._FlashcardViewerState, () => ({
    __proto__: dart.getGetters(flashcard_viewer._FlashcardViewerState.__proto__),
    [_controller]: animation_controller.AnimationController,
    [_flipAnimation]: animation.Animation$(core.double)
  }));
  dart.setSetterSignature(flashcard_viewer._FlashcardViewerState, () => ({
    __proto__: dart.getSetters(flashcard_viewer._FlashcardViewerState.__proto__),
    [_controller]: animation_controller.AnimationController,
    [_flipAnimation]: animation.Animation$(core.double)
  }));
  dart.setLibraryUri(flashcard_viewer._FlashcardViewerState, I[10]);
  dart.setFieldSignature(flashcard_viewer._FlashcardViewerState, () => ({
    __proto__: dart.getFields(flashcard_viewer._FlashcardViewerState.__proto__),
    [___FlashcardViewerState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___FlashcardViewerState__flipAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_currentIndex]: dart.fieldType(core.int)
  }));
  var flashcards$4 = dart.privateName(flashcard_preview_screen, "FlashcardPreviewScreen.flashcards");
  var category$0 = dart.privateName(flashcard_preview_screen, "FlashcardPreviewScreen.category");
  var onFlashcardChanged$ = dart.privateName(flashcard_preview_screen, "FlashcardPreviewScreen.onFlashcardChanged");
  flashcard_preview_screen.FlashcardPreviewScreen = class FlashcardPreviewScreen extends framework.StatefulWidget {
    get flashcards() {
      return this[flashcards$4];
    }
    set flashcards(value) {
      super.flashcards = value;
    }
    get category() {
      return this[category$0];
    }
    set category(value) {
      super.category = value;
    }
    get onFlashcardChanged() {
      return this[onFlashcardChanged$];
    }
    set onFlashcardChanged(value) {
      super.onFlashcardChanged = value;
    }
    static ['_#new#tearOff'](opts) {
      let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
      let category = opts && 'category' in opts ? opts.category : null;
      let onFlashcardChanged = opts && 'onFlashcardChanged' in opts ? opts.onFlashcardChanged : null;
      return new flashcard_preview_screen.FlashcardPreviewScreen.new({flashcards: flashcards, category: category, onFlashcardChanged: onFlashcardChanged});
    }
    createState() {
      return new flashcard_preview_screen._FlashcardPreviewScreenState.new();
    }
  };
  (flashcard_preview_screen.FlashcardPreviewScreen.new = function(opts) {
    let flashcards = opts && 'flashcards' in opts ? opts.flashcards : null;
    let category = opts && 'category' in opts ? opts.category : null;
    let onFlashcardChanged = opts && 'onFlashcardChanged' in opts ? opts.onFlashcardChanged : null;
    this[flashcards$4] = flashcards;
    this[category$0] = category;
    this[onFlashcardChanged$] = onFlashcardChanged;
    flashcard_preview_screen.FlashcardPreviewScreen.__proto__.new.call(this);
    ;
  }).prototype = flashcard_preview_screen.FlashcardPreviewScreen.prototype;
  dart.addTypeTests(flashcard_preview_screen.FlashcardPreviewScreen);
  dart.addTypeCaches(flashcard_preview_screen.FlashcardPreviewScreen);
  dart.setMethodSignature(flashcard_preview_screen.FlashcardPreviewScreen, () => ({
    __proto__: dart.getMethods(flashcard_preview_screen.FlashcardPreviewScreen.__proto__),
    createState: dart.fnType(flashcard_preview_screen._FlashcardPreviewScreenState, [])
  }));
  dart.setLibraryUri(flashcard_preview_screen.FlashcardPreviewScreen, I[11]);
  dart.setFieldSignature(flashcard_preview_screen.FlashcardPreviewScreen, () => ({
    __proto__: dart.getFields(flashcard_preview_screen.FlashcardPreviewScreen.__proto__),
    flashcards: dart.finalFieldType(core.List$(flashcard_model.Flashcard)),
    category: dart.finalFieldType(core.String),
    onFlashcardChanged: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  var ___FlashcardPreviewScreenState_localFlashcards = dart.privateName(flashcard_preview_screen, "_#_FlashcardPreviewScreenState#localFlashcards");
  var _saveFlashcards$ = dart.privateName(flashcard_preview_screen, "_saveFlashcards");
  var _deleteFlashcard = dart.privateName(flashcard_preview_screen, "_deleteFlashcard");
  flashcard_preview_screen._FlashcardPreviewScreenState = class _FlashcardPreviewScreenState extends framework.State$(flashcard_preview_screen.FlashcardPreviewScreen) {
    get localFlashcards() {
      let t4;
      t4 = this[___FlashcardPreviewScreenState_localFlashcards];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("localFlashcards")) : t4;
    }
    set localFlashcards(localFlashcards$35param) {
      this[___FlashcardPreviewScreenState_localFlashcards] = localFlashcards$35param;
    }
    initState() {
      super.initState();
      this.localFlashcards = T.ListOfFlashcard().from(this.widget.flashcards);
      core.print("FlashcardPreviewScreen initState: Local flashcards initialized.");
    }
    [_deleteFlashcard](flashcard) {
      return async.async(dart.void, (function* _deleteFlashcard() {
        core.print("Deleting flashcard: " + flashcard.question);
        this.setState(dart.fn(() => {
          this.localFlashcards[$remove](flashcard);
          core.print("Flashcard deleted from localFlashcards.");
        }, T.VoidTovoid()));
        yield this[_saveFlashcards$]();
        core.print("Flashcards saved to SharedPreferences.");
        this.widget.onFlashcardChanged();
        core.print("onFlashcardChanged callback called.");
      }).bind(this));
    }
    [_saveFlashcards$]() {
      return async.async(dart.void, (function* _saveFlashcards() {
        let prefs = (yield shared_preferences.SharedPreferences.getInstance());
        let encodedData = convert.json.encode(this.localFlashcards[$map](T.MapOfString$dynamic(), dart.fn(e => e.toJson(), T.FlashcardToMapOfString$dynamic()))[$toList]());
        yield prefs.setString("flashcards", encodedData);
        core.print("Flashcards saved to SharedPreferences.");
      }).bind(this));
    }
    build(context) {
      let categoryFlashcards = this.localFlashcards[$where](dart.fn(flashcard => flashcard.category === this.widget.category, T.FlashcardTobool()))[$toList]();
      core.print("Building FlashcardPreviewScreen with " + dart.str(categoryFlashcards[$length]) + " flashcards.");
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Flashcards in " + this.widget.category)}), body: new scroll_view.ListView.builder({itemCount: categoryFlashcards[$length], itemBuilder: dart.fn((context, index) => {
            let flashcard = categoryFlashcards[$_get](index);
            return new list_tile.ListTile.new({title: new text.Text.new(flashcard.question), subtitle: new text.Text.new(flashcard.answer), trailing: new icon_button.IconButton.new({icon: new icon.Icon.new(icons.Icons.delete), onPressed: dart.fn(() => this[_deleteFlashcard](flashcard), T.VoidTovoid())})});
          }, T.BuildContextAndintToListTile())})});
    }
    static ['_#new#tearOff']() {
      return new flashcard_preview_screen._FlashcardPreviewScreenState.new();
    }
  };
  (flashcard_preview_screen._FlashcardPreviewScreenState.new = function() {
    this[___FlashcardPreviewScreenState_localFlashcards] = null;
    flashcard_preview_screen._FlashcardPreviewScreenState.__proto__.new.call(this);
    ;
  }).prototype = flashcard_preview_screen._FlashcardPreviewScreenState.prototype;
  dart.addTypeTests(flashcard_preview_screen._FlashcardPreviewScreenState);
  dart.addTypeCaches(flashcard_preview_screen._FlashcardPreviewScreenState);
  dart.setMethodSignature(flashcard_preview_screen._FlashcardPreviewScreenState, () => ({
    __proto__: dart.getMethods(flashcard_preview_screen._FlashcardPreviewScreenState.__proto__),
    [_deleteFlashcard]: dart.fnType(async.Future$(dart.void), [flashcard_model.Flashcard]),
    [_saveFlashcards$]: dart.fnType(async.Future$(dart.void), []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(flashcard_preview_screen._FlashcardPreviewScreenState, () => ({
    __proto__: dart.getGetters(flashcard_preview_screen._FlashcardPreviewScreenState.__proto__),
    localFlashcards: core.List$(flashcard_model.Flashcard)
  }));
  dart.setSetterSignature(flashcard_preview_screen._FlashcardPreviewScreenState, () => ({
    __proto__: dart.getSetters(flashcard_preview_screen._FlashcardPreviewScreenState.__proto__),
    localFlashcards: core.List$(flashcard_model.Flashcard)
  }));
  dart.setLibraryUri(flashcard_preview_screen._FlashcardPreviewScreenState, I[11]);
  dart.setFieldSignature(flashcard_preview_screen._FlashcardPreviewScreenState, () => ({
    __proto__: dart.getFields(flashcard_preview_screen._FlashcardPreviewScreenState.__proto__),
    [___FlashcardPreviewScreenState_localFlashcards]: dart.fieldType(dart.nullable(core.List$(flashcard_model.Flashcard)))
  }));
  var _data = dart.privateName(shared_preferences_platform_interface, "_data");
  shared_preferences_platform_interface.InMemorySharedPreferencesStore = class InMemorySharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    static ['_#empty#tearOff']() {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty();
    }
    static ['_#withData#tearOff'](data) {
      return new shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData(data);
    }
    clear() {
      return async.async(core.bool, (function* clear() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, (function* clearWithParameters() {
        let filter = parameters.filter;
        if (filter.allowList != null) {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix) && dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        } else {
          this[_data][$removeWhere](dart.fn((key, _) => key[$startsWith](filter.prefix), T.StringAndObjectTobool()));
        }
        return true;
      }).bind(this));
    }
    getAll() {
      return async.async(T.MapOfString$Object(), (function* getAll() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: "flutter."})}));
      }).bind(this));
    }
    getAllWithPrefix(prefix) {
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), (function* getAllWithParameters() {
        let filter = parameters.filter;
        let preferences = T.LinkedHashMapOfString$Object().from(this[_data]);
        preferences[$removeWhere](dart.fn((key, _) => !key[$startsWith](filter.prefix) || filter.allowList != null && !dart.nullCheck(filter.allowList).contains(key), T.StringAndObjectTobool()));
        return preferences;
      }).bind(this));
    }
    remove(key) {
      return async.async(core.bool, (function* remove() {
        this[_data][$remove](key);
        return true;
      }).bind(this));
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, (function* setValue() {
        this[_data][$_set](key, value);
        return true;
      }).bind(this));
    }
  };
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.empty = function() {
    this[_data] = new (T.IdentityMapOfString$Object()).new();
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  (shared_preferences_platform_interface.InMemorySharedPreferencesStore.withData = function(data) {
    this[_data] = T.LinkedHashMapOfString$Object().from(data);
    shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = shared_preferences_platform_interface.InMemorySharedPreferencesStore.prototype;
  dart.addTypeTests(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.addTypeCaches(shared_preferences_platform_interface.InMemorySharedPreferencesStore);
  dart.setMethodSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getMethods(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object])
  }));
  dart.setLibraryUri(shared_preferences_platform_interface.InMemorySharedPreferencesStore, I[8]);
  dart.setFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ({
    __proto__: dart.getFields(shared_preferences_platform_interface.InMemorySharedPreferencesStore.__proto__),
    [_data]: dart.finalFieldType(core.Map$(core.String, core.Object))
  }));
  dart.setStaticFieldSignature(shared_preferences_platform_interface.InMemorySharedPreferencesStore, () => ['_defaultPrefix']);
  dart.defineLazy(shared_preferences_platform_interface.InMemorySharedPreferencesStore, {
    /*shared_preferences_platform_interface.InMemorySharedPreferencesStore._defaultPrefix*/get _defaultPrefix() {
      return "flutter.";
    }
  }, false);
  var prefix$ = dart.privateName(types, "PreferencesFilter.prefix");
  var allowList$ = dart.privateName(types, "PreferencesFilter.allowList");
  types.PreferencesFilter = class PreferencesFilter extends core.Object {
    get prefix() {
      return this[prefix$];
    }
    set prefix(value) {
      this[prefix$] = value;
    }
    get allowList() {
      return this[allowList$];
    }
    set allowList(value) {
      this[allowList$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let prefix = opts && 'prefix' in opts ? opts.prefix : null;
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return new types.PreferencesFilter.new({prefix: prefix, allowList: allowList});
    }
  };
  (types.PreferencesFilter.new = function(opts) {
    let prefix = opts && 'prefix' in opts ? opts.prefix : null;
    let allowList = opts && 'allowList' in opts ? opts.allowList : null;
    this[prefix$] = prefix;
    this[allowList$] = allowList;
    ;
  }).prototype = types.PreferencesFilter.prototype;
  dart.addTypeTests(types.PreferencesFilter);
  dart.addTypeCaches(types.PreferencesFilter);
  dart.setLibraryUri(types.PreferencesFilter, I[12]);
  dart.setFieldSignature(types.PreferencesFilter, () => ({
    __proto__: dart.getFields(types.PreferencesFilter.__proto__),
    prefix: dart.fieldType(core.String),
    allowList: dart.fieldType(dart.nullable(core.Set$(core.String)))
  }));
  var filter$ = dart.privateName(types, "GetAllParameters.filter");
  types.GetAllParameters = class GetAllParameters extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.GetAllParameters.new({filter: filter});
    }
  };
  (types.GetAllParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$] = filter;
    ;
  }).prototype = types.GetAllParameters.prototype;
  dart.addTypeTests(types.GetAllParameters);
  dart.addTypeCaches(types.GetAllParameters);
  dart.setLibraryUri(types.GetAllParameters, I[12]);
  dart.setFieldSignature(types.GetAllParameters, () => ({
    __proto__: dart.getFields(types.GetAllParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var filter$0 = dart.privateName(types, "ClearParameters.filter");
  types.ClearParameters = class ClearParameters extends core.Object {
    get filter() {
      return this[filter$0];
    }
    set filter(value) {
      this[filter$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return new types.ClearParameters.new({filter: filter});
    }
  };
  (types.ClearParameters.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    this[filter$0] = filter;
    ;
  }).prototype = types.ClearParameters.prototype;
  dart.addTypeTests(types.ClearParameters);
  dart.addTypeCaches(types.ClearParameters);
  dart.setLibraryUri(types.ClearParameters, I[12]);
  dart.setFieldSignature(types.ClearParameters, () => ({
    __proto__: dart.getFields(types.ClearParameters.__proto__),
    filter: dart.fieldType(types.PreferencesFilter)
  }));
  var text$ = dart.privateName(flashcard_view, "FlashcardView.text");
  flashcard_view.FlashcardView = class FlashcardView extends framework.StatelessWidget {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      return new flashcard_view.FlashcardView.new({text: text});
    }
    build(context) {
      return new basic.Center.new({child: new card.Card.new({child: new container.Container.new({width: 300, height: 200, alignment: alignment.Alignment.center, padding: new edge_insets.EdgeInsets.all(16), child: new text.Text.new(this.text, {textAlign: ui.TextAlign.center, style: new text_style.TextStyle.new({fontSize: 24, fontWeight: ui.FontWeight.bold})})}), margin: new edge_insets.EdgeInsets.all(16), elevation: 10})});
    }
  };
  (flashcard_view.FlashcardView.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    this[text$] = text;
    flashcard_view.FlashcardView.__proto__.new.call(this);
    ;
  }).prototype = flashcard_view.FlashcardView.prototype;
  dart.addTypeTests(flashcard_view.FlashcardView);
  dart.addTypeCaches(flashcard_view.FlashcardView);
  dart.setMethodSignature(flashcard_view.FlashcardView, () => ({
    __proto__: dart.getMethods(flashcard_view.FlashcardView.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(flashcard_view.FlashcardView, I[13]);
  dart.setFieldSignature(flashcard_view.FlashcardView, () => ({
    __proto__: dart.getFields(flashcard_view.FlashcardView.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  plugin_platform_interface.MockPlatformInterfaceMixin = class MockPlatformInterfaceMixin extends core.Object {};
  (plugin_platform_interface.MockPlatformInterfaceMixin.new = function() {
    ;
  }).prototype = plugin_platform_interface.MockPlatformInterfaceMixin.prototype;
  dart.addTypeTests(plugin_platform_interface.MockPlatformInterfaceMixin);
  dart.addTypeCaches(plugin_platform_interface.MockPlatformInterfaceMixin);
  plugin_platform_interface.MockPlatformInterfaceMixin[dart.implements] = () => [plugin_platform_interface.PlatformInterface];
  dart.setLibraryUri(plugin_platform_interface.MockPlatformInterfaceMixin, I[7]);
  method_channel_shared_preferences.MethodChannelSharedPreferencesStore = class MethodChannelSharedPreferencesStore extends shared_preferences_platform_interface.SharedPreferencesStorePlatform {
    remove(key) {
      return async.async(core.bool, function* remove() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "remove", new (T.IdentityMapOfString$dynamic()).from(["key", key])));
      });
    }
    setValue(valueType, key, value) {
      return async.async(core.bool, function* setValue() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "set" + valueType, new (T.IdentityMapOfString$dynamic()).from(["key", key, "value", value])));
      });
    }
    clear() {
      return async.async(core.bool, function* clear() {
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clear"));
      });
    }
    clearWithPrefix(prefix) {
      return async.async(core.bool, (function* clearWithPrefix() {
        return this.clearWithParameters(new types.ClearParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    clearWithParameters(parameters) {
      return async.async(core.bool, function* clearWithParameters() {
        let t4;
        let filter = parameters.filter;
        return dart.nullCheck(yield method_channel_shared_preferences._kChannel.invokeMethod(core.bool, "clearWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", (t4 = filter.allowList, t4 == null ? null : t4[$toList]())])));
      });
    }
    getAll() {
      return async.async(T.MapOfString$Object(), function* getAll() {
        let t4;
        t4 = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAll"));
        return t4 == null ? new (T.IdentityMapOfString$Object()).new() : t4;
      });
    }
    getAllWithPrefix(prefix, opts) {
      let allowList = opts && 'allowList' in opts ? opts.allowList : null;
      return async.async(T.MapOfString$Object(), (function* getAllWithPrefix() {
        return this.getAllWithParameters(new types.GetAllParameters.new({filter: new types.PreferencesFilter.new({prefix: prefix})}));
      }).bind(this));
    }
    getAllWithParameters(parameters) {
      return async.async(T.MapOfString$Object(), function* getAllWithParameters() {
        let t4, t4$;
        let filter = parameters.filter;
        let allowListAsList = (t4 = filter.allowList, t4 == null ? null : t4[$toList]());
        t4$ = (yield method_channel_shared_preferences._kChannel.invokeMapMethod(core.String, core.Object, "getAllWithParameters", new (T.IdentityMapOfString$dynamic()).from(["prefix", filter.prefix, "allowList", allowListAsList])));
        return t4$ == null ? new (T.IdentityMapOfString$Object()).new() : t4$;
      });
    }
    static ['_#new#tearOff']() {
      return new method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new();
    }
  };
  (method_channel_shared_preferences.MethodChannelSharedPreferencesStore.new = function() {
    method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__.new.call(this);
    ;
  }).prototype = method_channel_shared_preferences.MethodChannelSharedPreferencesStore.prototype;
  dart.addTypeTests(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.addTypeCaches(method_channel_shared_preferences.MethodChannelSharedPreferencesStore);
  dart.setMethodSignature(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, () => ({
    __proto__: dart.getMethods(method_channel_shared_preferences.MethodChannelSharedPreferencesStore.__proto__),
    remove: dart.fnType(async.Future$(core.bool), [core.String]),
    setValue: dart.fnType(async.Future$(core.bool), [core.String, core.String, core.Object]),
    clear: dart.fnType(async.Future$(core.bool), []),
    getAll: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), []),
    getAllWithPrefix: dart.fnType(async.Future$(core.Map$(core.String, core.Object)), [core.String], {allowList: dart.nullable(core.Set$(core.String))}, {})
  }));
  dart.setLibraryUri(method_channel_shared_preferences.MethodChannelSharedPreferencesStore, I[14]);
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  dart.defineLazy(method_channel_shared_preferences, {
    /*method_channel_shared_preferences._kChannel*/get _kChannel() {
      return C[10] || CT.C10;
    }
  }, false);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/practice_screen.dart": practice_screen,
    "file:///zapp/project/lib/new_flashcard_screen.dart": new_flashcard_screen,
    "file:///zapp/project/lib/flashcard_model.dart": flashcard_model,
    "package:shared_preferences/shared_preferences.dart": shared_preferences,
    "package:shared_preferences_web/shared_preferences_web.dart": shared_preferences_web,
    "file:///zapp/project/lib/flashcard_viewer.dart": flashcard_viewer,
    "file:///zapp/project/lib/flashcard_preview_screen.dart": flashcard_preview_screen,
    "package:shared_preferences_platform_interface/shared_preferences_platform_interface.dart": shared_preferences_platform_interface,
    "package:shared_preferences_platform_interface/types.dart": types,
    "file:///zapp/project/lib/flashcard_view.dart": flashcard_view,
    "package:plugin_platform_interface/plugin_platform_interface.dart": plugin_platform_interface,
    "package:shared_preferences_platform_interface/method_channel_shared_preferences.dart": method_channel_shared_preferences
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/practice_screen.dart","/zapp/project/lib/new_flashcard_screen.dart","/zapp/project/lib/flashcard_model.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences-2.2.2/lib/shared_preferences.dart","/zapp/pub/.pub_cache/hosted/pub.dev/plugin_platform_interface-2.1.6/lib/plugin_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/shared_preferences_platform_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_web-2.2.1/lib/shared_preferences_web.dart","/zapp/project/lib/flashcard_viewer.dart","/zapp/project/lib/flashcard_preview_screen.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/types.dart","/zapp/project/lib/flashcard_view.dart","/zapp/pub/.pub_cache/hosted/pub.dev/shared_preferences_platform_interface-2.3.1/lib/method_channel_shared_preferences.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__practice_screen: practice_screen,
    zapp__project__lib__new_flashcard_screen: new_flashcard_screen,
    zapp__project__lib__flashcard_model: flashcard_model,
    shared_preferences: shared_preferences,
    shared_preferences_web: shared_preferences_web,
    zapp__project__lib__flashcard_viewer: flashcard_viewer,
    zapp__project__lib__flashcard_preview_screen: flashcard_preview_screen,
    shared_preferences_platform_interface: shared_preferences_platform_interface,
    types: types,
    zapp__project__lib__flashcard_view: flashcard_view,
    plugin_platform_interface: plugin_platform_interface,
    method_channel_shared_preferences: method_channel_shared_preferences
  };
}));

//# sourceMappingURL=main.js.map
